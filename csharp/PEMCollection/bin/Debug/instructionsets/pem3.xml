<?xml version="1.0" encoding="utf-8" ?>
<instructions>
  <!-- MRI's and Jumps-->
  <instruction>
    <mnemonic>LDA</mnemonic>
    <description>LoaD A register with data at address PPPP pppp wwww</description>
    <opcode>0000 PPPP pppp wwww</opcode>
    <t3>Ei, Lm</t3>
    <t4>ME, La</t4>
    <t5>nop</t5>
    <remark>P = page address bit, p = paragraph address bit, word address bits</remark>
  </instruction>
  <instruction>
    <mnemonic>ADD</mnemonic>
    <description>ADD data in A register with data at address PPPP pppp wwww and store result in A register</description>
    <opcode>0001 PPPP pppp wwww</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>P = page address bit, p = paragraph address bit, word address bits</remark>
  </instruction>
  <instruction>
    <mnemonic>SUB</mnemonic>
    <description>SUBtract data at address PPPP pppp wwww from data in A register and store result in A register</description>
    <opcode>0010 PPPP pppp wwww</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>P = page address bit, p = paragraph address bit, word address bits</remark>
  </instruction>
  <instruction>
    <mnemonic>STA</mnemonic>
    <description>STore data in A register at memory register PPPP pppp wwww</description>
    <opcode>0011 PPPP pppp wwww</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>P = page address bit, p = paragraph address bit, word address bits</remark>
  </instruction>
  <instruction>
    <mnemonic>LDB</mnemonic>
    <description>LoaD B register with data at address PPPP pppp wwww</description>
    <opcode>0100 PPPP pppp wwww</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>P = page address bit, p = paragraph address bit, word address bits</remark>
  </instruction>
  <instruction>
    <mnemonic>LDX</mnemonic>
    <description>LoaD indeX register nnnn with data at address pppp wwww</description>
    <opcode>0101 nnnn pppp aaaa</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>n = index register number bit, p = paragraph bit, w = word bit</remark>
  </instruction>
  <instruction>
    <mnemonic>JMP</mnemonic>
    <description>unconditional JuMP to address PPPP pppp wwww</description>
    <opcode>0110 PPPP pppp wwww</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>P = page address bit, p = paragraph address bit, word address bits</remark>
  </instruction>
  <instruction>
    <mnemonic>JAM</mnemonic>
    <description>conditional Jump if data in A register is Minus to address PPPP pppp wwww</description>
    <opcode>0111 PPPP pppp wwww</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>P = page address bit, p = paragraph address bit, word address bits</remark>
  </instruction>
  <instruction>
    <mnemonic>JAZ</mnemonic>
    <description>conditional Jump if data in A register is Zero to address PPPP pppp wwww</description>
    <opcode>1000 PPPP pppp wwww</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>P = page address bit, p = paragraph address bit, word address bits</remark>
  </instruction>
  <instruction>
    <mnemonic>JIM</mnemonic>
    <description>conditional Jump if data in Index register nnnn is Minus to address pppp wwww</description>
    <opcode>1001 nnnn pppp wwww</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>n = index register number bit, p = paragraph address bit, word address bits</remark>
  </instruction>
  <instruction>
    <mnemonic>JIZ</mnemonic>
    <description>conditional Jump if data in Index register nnnn is Zero to address pppp wwww</description>
    <opcode>1010 nnnn pppp wwww</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>n = index register number bit, p = paragraph address bit, word address bits</remark>
  </instruction>
  <instruction>
    <mnemonic>JMS</mnemonic>
    <description>JuMp to Subroutine start at address PPPP pppp wwww</description>
    <opcode>1011 PPPP pppp wwww</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>P = page address bit, p = paragraph address bit, word address bits</remark>
  </instruction>
  <instruction>
    <mnemonic>DSZ</mnemonic>
    <description>Decrement and Skip next instruction if index register nnnn is Zero</description>
    <opcode>1100 nnnn XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>n = index register number bit, X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>ISZ</mnemonic>
    <description>Increment and Skip next instruction if index register nnnn is Zero</description>
    <opcode>1101 nnnn XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>n = index register number bit, X = ignored bit</remark>
  </instruction>
  <!-- MIX codes-->
  <instruction>
    <mnemonic>SHL</mnemonic>
    <description>SHift A register 1 bit Left</description>
    <opcode>1110 0000 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>SHR</mnemonic>
    <description>SHift A register 1 bit Right</description>
    <opcode>1110 0001 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>RAL</mnemonic>
    <description>Rotate A register 1 bit Left</description>
    <opcode>1110 0010 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>RAR</mnemonic>
    <description>Rotate A register 1 bit Right</description>
    <opcode>1110 0011 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>LDM</mnemonic>
    <description>LoaD A register iMmediate with value at next address</description>
    <opcode>1110 0100 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>ADM</mnemonic>
    <description>ADd value at next address iMmediate to data in A register</description>
    <opcode>1110 0101 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>SBM</mnemonic>
    <description>SuBtract value at next address iMmediate from value in A register</description>
    <opcode>1110 0110 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>STM</mnemonic>
    <description>STore value in A register iMmediate at next address</description>
    <opcode>1110 0111 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>ORM</mnemonic>
    <description>OR value at next address iMmediate with value in A register, the result is in A register</description>
    <opcode>1110 1000 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>ANM</mnemonic>
    <description>ANd value at next address iMmediate with value in A register, the result is in A register</description>
    <opcode>1110 1001 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>XNM</mnemonic>
    <description>eXclusive Not or value at next address iMmediate with value in A register, the result is in A register</description>
    <opcode>1110 1010 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>LDN</mnemonic>
    <description>LoaD A register iNdirect with value specified by an address stored in index register nnnn</description>
    <opcode>1110 1011 nnnn XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>n = index register number bit, X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>ADN</mnemonic>
    <description>ADd A register iNdirect with value specified by an address stored in index register nnnn</description>
    <opcode>1110 1100 nnnn XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>n = index register number bit, X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>SBN</mnemonic>
    <description>SuBtract A register iNdirect with value specified by an address stored in index register nnnn</description>
    <opcode>1110 1101 nnnn XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>n = index register number bit, X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>STN</mnemonic>
    <description>STore value of A register iNdirect at address pointed by an address stored in index register nnnn</description>
    <opcode>1110 1110 nnnn XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>n = index register number bit, X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>JSN</mnemonic>
    <description>JuMp to Subroutine iNdirect start of subroutine at address pointed by an address stored in index register nnnn</description>
    <opcode>1110 1111 nnnn XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>n = index register number bit, X = ignored bit</remark>
  </instruction>
  <!-- OPR codes -->
  <instruction>
    <mnemonic>NOP</mnemonic>
    <description>No OPeration</description>
    <opcode>1111 0000 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>CLA</mnemonic>
    <description>CLear A register</description>
    <opcode>1111 0001 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>XCH</mnemonic>
    <description>eXCHange value in A register with value of index register nnnn</description>
    <opcode>1111 0010 nnnn XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>n = index register number bit, X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>DEX</mnemonic>
    <description>DEcrement indeX register nnnn by one</description>
    <opcode>1111 0011 nnnn XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>n = index register number bit, X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>INX</mnemonic>
    <description>INcrement indeX register nnnn by one</description>
    <opcode>1111 0100 nnnn XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>n = index register number bit, X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>CMA</mnemonic>
    <description>one CoMplement A register</description>
    <opcode>1111 0101 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>CMB</mnemonic>
    <description>one CoMplement B register</description>
    <opcode>1111 0110 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>IOR</mnemonic>
    <description>INclusive Or A register with B register, result in A register</description>
    <opcode>1111 0111 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>AND</mnemonic>
    <description>INclusive Or A register with B register, result in B register</description>
    <opcode>1111 1000 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>NOR</mnemonic>
    <description>Not OR A register with B register, result in A register</description>
    <opcode>1111 1001 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>NAN</mnemonic>
    <description>Not ANd A register with B register, result in A register</description>
    <opcode>1111 1010 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>XOR</mnemonic>
    <description>eXclusive OR A register with B register, result in A register</description>
    <opcode>1111 1011 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>BRB</mnemonic>
    <description>BRanch Back to address next after previous subroutine caller</description>
    <opcode>1111 1100 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>INP</mnemonic>
    <description>INPut A register with content of interface circuit</description>
    <opcode>1111 1101 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>OUT</mnemonic>
    <description>OUTput value of A register to interface circuit</description>
    <opcode>1111 1110 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>HLT</mnemonic>
    <description>HaLT processor</description>
    <opcode>1111 1111 XXXX XXXX</opcode>

    <t3></t3>
    <t4></t4>
    <t5></t5>

    <remark>X = ignored bit</remark>
  </instruction>
</instructions>