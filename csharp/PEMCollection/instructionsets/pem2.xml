<?xml version="1.0" encoding="utf-8" ?>
<instructions>
  <instruction>
    <mnemonic>LDA</mnemonic>
    <description>LoaD A register with data from 8 bits memory address</description>
    <opcode>0000 bbbb bbbb</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Ei, Lm</t3>
    <t4>ME, La</t4>
    <t5></t5>
    <remark>b = address bit</remark>
  </instruction>
  <instruction>
    <mnemonic>ADD</mnemonic>
    <description>ADD data in A register with data from 8 bits memory address and store result in A register</description>
    <opcode>0001 bbbb bbbb</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Ei, Lm</t3>
    <t4>ME, Lb</t4>
    <t5>Eu, La, S0</t5>
    <remark>b = address bit</remark>
  </instruction>
  <instruction>
    <mnemonic>SUB</mnemonic>
    <description>SUBtract data from 8 bits memory address from data in A register and store result in A register</description>
    <opcode>0010 bbbb bbbb</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Ei, Lm</t3>
    <t4>ME, Lb</t4>
    <t5>Eu, La, S1</t5>
    <remark>b = address bit</remark>
  </instruction>
  <instruction>
    <mnemonic>STA</mnemonic>
    <description>STore data in A register at 8 bits memory address</description>
    <opcode>0011 bbbb bbbb</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Ei, Lm</t3>
    <t4>Ea, Ld</t4>
    <t5>WE, ME</t5>
    <remark>b = address bit</remark>
  </instruction>
  <instruction>
    <mnemonic>LDB</mnemonic>
    <description>LoaD B register with data from 8 bits memory address</description>
    <opcode>0100 bbbb bbbb</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Ei, Lm</t3>
    <t4>ME, Lb</t4>
    <t5></t5>
    <remark>b = address bit</remark>
  </instruction>
  <instruction>
    <mnemonic>LDX</mnemonic>
    <description>LoaD indeX register with data from 8 bits memory address</description>
    <opcode>0101 bbbb bbbb</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Ei, Lm</t3>
    <t4>ME, Lx</t4>
    <t5></t5>
    <remark>b = address bit</remark>
  </instruction>
  <instruction>
    <mnemonic>JMP</mnemonic>
    <description>unconditional JuMP to 8 bits memory address</description>
    <opcode>0110 bbbb bbbb</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Ei, Lp or Ls (if in subroutine)</t3>
    <t4></t4>
    <t5></t5>
    <remark>b = address bit</remark>
  </instruction>
  <instruction>
    <mnemonic>JAM</mnemonic>
    <description>conditional Jump if data in A register is Minus to 8 bits memory address</description>
    <opcode>0111 bbbb bbbb</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Ei, Lp or Ls (if in subroutine)</t3>
    <t4></t4>
    <t5></t5>
    <remark>b = address bit</remark>
  </instruction>
  <instruction>
    <mnemonic>JAZ</mnemonic>
    <description>conditional Jump if data in A register is Zero to 8 bits memory address</description>
    <opcode>1000 bbbb bbbb</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Ei, Lp or Ls (if in subroutine)</t3>
    <t4></t4>
    <t5></t5>
    <remark>b = address bit</remark>
  </instruction>
  <instruction>
    <mnemonic>JIM</mnemonic>
    <description>conditional Jump if data in Index register is Minus to 8 bits memory address</description>
    <opcode>1001 bbbb bbbb</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Ei, Lp or Ls (if in subroutine)</t3>
    <t4></t4>
    <t5></t5>
    <remark>b = address bit</remark>
  </instruction>
  <instruction>
    <mnemonic>JIZ</mnemonic>
    <description>conditional Jump if data in Index register is Zero to 8 bits memory address</description>
    <opcode>1010 bbbb bbbb</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Ei, Lp or Ls (if in subroutine)</t3>
    <t4></t4>
    <t5></t5>
    <remark>b = address bit</remark>
  </instruction>
  <instruction>
    <mnemonic>JMS</mnemonic>
    <description>JuMp to Subroutine start at 8 bits memory address</description>
    <opcode>1011 bbbb bbbb</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>(JMS flag = 1)</t3>
    <t4>Ei, Ls</t4>
    <t5></t5>
    <remark>b = address bit</remark>
  </instruction>
  <instruction>
    <mnemonic>NOP</mnemonic>
    <description>No OPeration</description>
    <opcode>1111 0000 XXXX</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3></t3>
    <t4></t4>
    <t5></t5>
    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>CLA</mnemonic>
    <description>CLear A register</description>
    <opcode>1111 0001 XXXX</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Eu, La</t3>
    <t4></t4>
    <t5></t5>
    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>XCH</mnemonic>
    <description>eXCHange data from A register with data from Index register</description>
    <opcode>1111 0010 XXXX</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Ea, Ld</t3>
    <t4>Ex, La</t4>
    <t5>Ed, Lx</t5>
    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>DEX</mnemonic>
    <description>DEcrement indeX register by one</description>
    <opcode>1111 0011 XXXX</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>DEX</t3>
    <t4></t4>
    <t5></t5>
    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>INX</mnemonic>
    <description>INCrement index register by one</description>
    <opcode>1111 0100 XXXX</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>INX</t3>
    <t4></t4>
    <t5></t5>
    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>CMA</mnemonic>
    <description>CoMplement data in A register</description>
    <opcode>1111 0101 XXXX</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Eu, La, S1, S0</t3>
    <t4></t4>
    <t5></t5>
    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>CMB</mnemonic>
    <description>CoMplement data in A register</description>
    <opcode>1111 0110 XXXX</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Eu, Lb, S2</t3>
    <t4></t4>
    <t5></t5>
    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>IOR</mnemonic>
    <description>Inclusive OR data in A register with data in B register</description>
    <opcode>1111 0111 XXXX</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Eu, La, S2, S0</t3>
    <t4></t4>
    <t5></t5>
    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>AND</mnemonic>
    <description>AND data in A register with data in B register</description>
    <opcode>1111 1000 XXXX</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Eu, La, S2, S1</t3>
    <t4></t4>
    <t5></t5>
    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>NOR</mnemonic>
    <description>Not inclusive OR data in A register with data in B register</description>
    <opcode>1111 1001 XXXX</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Eu, La, S2, S1; S0</t3>
    <t4></t4>
    <t5></t5>
    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>NAN</mnemonic>
    <description>Not ANd data in A register with data in B register</description>
    <opcode>1111 1010 XXXX</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Eu, La, S3</t3>
    <t4></t4>
    <t5></t5>
    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>XOR</mnemonic>
    <description>eXclusive OR data in A register with data in B register</description>
    <opcode>1111 1011 XXXX</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Eu, La, S3, S0</t3>
    <t4></t4>
    <t5></t5>
    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>BRB</mnemonic>
    <description>BRanch Back to subroutine caller</description>
    <opcode>1111 1100 XXXX</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>(JMS flag = 0)</t3>
    <t4></t4>
    <t5></t5>
    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>INP</mnemonic>
    <description>read INPut data from index register in A register</description>
    <opcode>1111 1101 XXXX</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Ln</t3>
    <t4>En, La</t4>
    <t5></t5>
    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>OUT</mnemonic>
    <description>OUTput data in A register to index register</description>
    <opcode>1111 1110 XXXX</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3>Ea, Lo</t3>
    <t4></t4>
    <t5></t5>
    <remark>X = ignored bit</remark>
  </instruction>
  <instruction>
    <mnemonic>HLT</mnemonic>
    <description>HaLT the processor</description>
    <opcode>1111 1111 XXXX</opcode>
    <t0>Ep, Lm</t0>
    <t1>Cp</t1>
    <t2>ME, Li</t2>
    <t3></t3>
    <t4></t4>
    <t5></t5>
    <remark>X = ignored bit</remark>
  </instruction>
</instructions>