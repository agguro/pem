     1                                  ;Name:          pem1asm.asm
     2                                  ;Build:         see makefile
     3                                  ;Run:           ./pem1asm sourcefile -o binaryfile
     4                                  ;description:   Simple assembler for PEM1
     5                                  ;               -o creates binary file for PEM1 program.  This program cannot be run from any commandline!
     6                                  
     7                                  BITS 64
     8                                  
   839                                  [list -]
   840                                  
   841                                  ; maximum argument count
   842                                  %define ARGC 4
   843                                  ; custom errors must begin with number -134
   844                                  %define ESHOWUSAGE 		-134
   845                                  %define EILEGALOPTION 	-135
   846                                  %define EFILEEXISTS		-136
   847                                  %define ENOTUSING		-137
   848                                  %define EILEGALCHAR		-138
   849                                  
   850                                  section .bss
   851 00000000 <res 00000008>              fdsource:           resq    1
   852 00000008 <res 00000008>              fddestination:      resq    1
   853 00000010 <res 00000008>              ptrSourceFile:      resq    1
   854 00000018 <res 00000008>              ptrDestinationFile: resq    1
   855 00000020 <res 00000008>              charcount:			resq	1
   856                                      ;buffer: 			resq	1
   857 00000028 <res 00000008>              databytes:			resq	1
   858                                      ; flags
   859 00000030 <res 00000008>              sourcelines:		resq	1
   860 00000038 <res 00000001>              ignoreLine:			resb	1
   861 00000039 <res 00000001>              firstCharInLine:	resb	1
   862                                      
   863                                  section .data
   864                                  
   865 00000000 0000000000000000        buffer	db 0,0,0,0,0,0,0,0
   866                                  
   867                                  ; the errors messages list
   868                                  errorList:
   869 00000008 [5804000000000000]-     	dq	EPERMerr,ENOENTerr,ESRCHerr,EINTRerr,EIOerr,ENXIOerr,E2BIGerr
   870 00000010 [7104000000000000]-
   871 00000018 [8C04000000000000]-
   872 00000020 [9D04000000000000]-
   873 00000028 [B604000000000000]-
   874 00000030 [C104000000000000]-
   875 00000038 [DC04000000000000] 
   876 00000040 [F404000000000000]-     	dq	ENOEXECerr,EBADFerr,ECHILDerr,EAGAINerr,ENOMEMerr,EACCESerr
   877 00000048 [0705000000000000]-
   878 00000050 [1805000000000000]-
   879 00000058 [2C05000000000000]-
   880 00000060 [3705000000000000]-
   881 00000068 [4605000000000000] 
   882 00000070 [5905000000000000]-     	dq	EFAULTerr,ENOTBLKerr,EBUSYerr,EEXISTerr,EXDEVerr,ENODEVerr
   883 00000078 [6605000000000000]-
   884 00000080 [7D05000000000000]-
   885 00000088 [9605000000000000]-
   886 00000090 [A305000000000000]-
   887 00000098 [B605000000000000] 
   888 000000A0 [C605000000000000]-     	dq	ENOTDIRerr,EISDIRerr,EINVALerr,ENFILEerr,EMFILEerr,ENOTTYerr
   889 000000A8 [D705000000000000]-
   890 000000B0 [E705000000000000]-
   891 000000B8 [F905000000000000]-
   892 000000C0 [0E06000000000000]-
   893 000000C8 [2306000000000000] 
   894 000000D0 [3506000000000000]-     	dq	ETXTBSYerr,EFBIGerr,ENOSPCerr,ESPIPEerr,EROFSerr,EMLINKerr
   895 000000D8 [4506000000000000]-
   896 000000E0 [5506000000000000]-
   897 000000E8 [6E06000000000000]-
   898 000000F0 [7C06000000000000]-
   899 000000F8 [9306000000000000] 
   900 00000100 [A306000000000000]-     	dq	EPIPEerr,EDOMerr,ERANGEerr,EDEADLKerr,ENAMETOOLONGerr,ENOLCKerr
   901 00000108 [B006000000000000]-
   902 00000110 [D506000000000000]-
   903 00000118 [F406000000000000]-
   904 00000120 [1307000000000000]-
   905 00000128 [2707000000000000] 
   906 00000130 [4207000000000000]-     	dq	ENOSYSerr,ENOTEMPTYerr,ELOOPerr,EWOULDBLOCKerr,ENOMSGerr
   907 00000138 [5C07000000000000]-
   908 00000140 [7107000000000000]-
   909 00000148 [9607000000000000]-
   910 00000150 [AD07000000000000] 
   911 00000158 [C907000000000000]-     	dq	EIDRMerr,ECHRNGerr,EL2NSYNCerr,EL3HLTerr,EL3RSTerr,ELNRNGerr
   912 00000160 [DD07000000000000]-
   913 00000168 [FA07000000000000]-
   914 00000170 [1408000000000000]-
   915 00000178 [2408000000000000]-
   916 00000180 [3308000000000000] 
   917 00000188 [4D08000000000000]-     	dq	EUNATCHerr,ENOCSIerr,EL2HLTerr,EBADEerr,EBADRerr,EXFULLerr
   918 00000190 [6B08000000000000]-
   919 00000198 [8708000000000000]-
   920 000001A0 [9708000000000000]-
   921 000001A8 [A908000000000000]-
   922 000001B0 [C508000000000000] 
   923 000001B8 [D408000000000000]-     	dq	ENOANOerr,EBADRQCerr,EBADSLTerr,EDEADLOCKerr,EBFONTerr,ENOSTRerr
   924 000001C0 [DE08000000000000]-
   925 000001C8 [F408000000000000]-
   926 000001D0 [0209000000000000]-
   927 000001D8 [2109000000000000]-
   928 000001E0 [3709000000000000] 
   929 000001E8 [4C09000000000000]-     	dq	ENODATAerr,ETIMEerr,ENOSRerr,ENONETerr,ENOPKGerr,EREMOTEerr
   930 000001F0 [5F09000000000000]-
   931 000001F8 [6E09000000000000]-
   932 00000200 [8809000000000000]-
   933 00000208 [A709000000000000]-
   934 00000210 [BE09000000000000] 
   935 00000218 [D009000000000000]-     	dq	ENOLINKerr,EADVerr,ESRMNTerr,ECOMMerr,EPROTOerr,EMULTIHOPerr
   936 00000220 [E709000000000000]-
   937 00000228 [F809000000000000]-
   938 00000230 [070A000000000000]-
   939 00000238 [240A000000000000]-
   940 00000240 [340A000000000000] 
   941 00000248 [480A000000000000]-     	dq	EDOTDOTerr,EBADMSGerr,EOVERFLOWerr,ENOTUNIQerr,EBADFDerr,EREMCHGerr
   942 00000250 [5C0A000000000000]-
   943 00000258 [700A000000000000]-
   944 00000260 [970A000000000000]-
   945 00000268 [B30A000000000000]-
   946 00000270 [D10A000000000000] 
   947 00000278 [E90A000000000000]-     	dq	ELIBACCerr,ELIBBADerr,ELIBSCNerr,ELIBMAXerr,ELIBEXECerr,EILSEQerr
   948 00000280 [110B000000000000]-
   949 00000288 [370B000000000000]-
   950 00000290 [580B000000000000]-
   951 00000298 [890B000000000000]-
   952 000002A0 [B00B000000000000] 
   953 000002A8 [C70B000000000000]-     	dq	ERESTARTerr,ESTRPIPEerr,EUSERSerr,ENOTSOCKerr,EDESTADDRREQerr
   954 000002B0 [F40B000000000000]-
   955 000002B8 [080C000000000000]-
   956 000002C0 [180C000000000000]-
   957 000002C8 [380C000000000000] 
   958 000002D0 [560C000000000000]-     	dq	EMSGSIZEerr,EPROTOTYPEerr,ENOPROTOOPTerr,EPROTONOSUPPORTerr
   959 000002D8 [680C000000000000]-
   960 000002E0 [880C000000000000]-
   961 000002E8 [A00C000000000000] 
   962 000002F0 [B80C000000000000]-     	dq	ESOCKTNOSUPPORTerr,EOPNOTSUPPerr,EPFNOSUPPORTerr,EAFNOSUPPORTerr
   963 000002F8 [D30C000000000000]-
   964 00000300 [020D000000000000]-
   965 00000308 [210D000000000000] 
   966 00000310 [4B0D000000000000]-     	dq	EADDRINUSEerr,EADDRNOTAVAILerr,ENETDOWNerr,ENETUNREACHerr,ENETRESETerr
   967 00000318 [630D000000000000]-
   968 00000320 [840D000000000000]-
   969 00000328 [950D000000000000]-
   970 00000330 [AD0D000000000000] 
   971 00000338 [DA0D000000000000]-     	dq	ECONNABORTEDerr,ECONNRESETerr,ENOBUFSerr,EISCONNerr,ENOTCONNerr
   972 00000340 [FC0D000000000000]-
   973 00000348 [160E000000000000]-
   974 00000350 [310E000000000000]-
   975 00000358 [5A0E000000000000] 
   976 00000360 [7F0E000000000000]-     	dq	ESHUTDOWNerr,ETOOMANYREFSerr,ETIMEDOUTerr,ECONNREFUSEDerr,EHOSTDOWNerr,
   977 00000368 [AE0E000000000000]-
   978 00000370 [D20E000000000000]-
   979 00000378 [E80E000000000000]-
   980 00000380 [FC0E000000000000] 
   981 00000388 [0A0F000000000000]-     	dq	EHOSTUNREACHerr,EALREADYerr,EINPROGRESSerr,ESTALEerr,EUCLEANerr,
   982 00000390 [1C0F000000000000]-
   983 00000398 [3B0F000000000000]-
   984 000003A0 [560F000000000000]-
   985 000003A8 [6D0F000000000000] 
   986 000003B0 [870F000000000000]-     	dq	ENOTNAMerr,ENAVAILerr,EISNAMerr,EREMOTEIOerr,EDQUOTerr,ENOMEDIUMerr
   987 000003B8 [A40F000000000000]-
   988 000003C0 [C30F000000000000]-
   989 000003C8 [D90F000000000000]-
   990 000003D0 [EB0F000000000000]-
   991 000003D8 [FB0F000000000000] 
   992 000003E0 [0C10000000000000]-     	dq	EMEDIUMTYPEerr,ECANCELEDerr,ENOKEYerr,EKEYEXPIREDerr,EKEYREVOKEDerr
   993 000003E8 [1F10000000000000]-
   994 000003F0 [3310000000000000]-
   995 000003F8 [4F10000000000000]-
   996 00000400 [6010000000000000] 
   997 00000408 [7610000000000000]-     	dq	EKEYREJECTEDerr,EOWNERDEADerr,ENOTRECOVERABLEerr,ERFKILLerr,EHWPOISONerr
   998 00000410 [9310000000000000]-
   999 00000418 [9F10000000000000]-
  1000 00000420 [B610000000000000]-
  1001 00000428 [DD10000000000000] 
  1002                                  	; custom errors must begin with number -134
  1003 00000430 [FD10000000000000]-     	dq	ESHOWUSAGEerr,EILEGALOPTIONerr,EFILEEXISTSerr,ENOTUSINGerr,EILEGALCHARerr
  1004 00000438 [2611000000000000]-
  1005 00000440 [5211000000000000]-
  1006 00000448 [7111000000000000]-
  1007 00000450 [A911000000000000] 
  1008                                  
  1009 00000458 4F7065726174696F6E-     	EPERMerr:			db	EPERMmsg,10,0
  1010 00000461 206E6F74207065726D-
  1011 0000046A 69747465640A00     
  1012 00000471 4E6F20737563682066-     	ENOENTerr:			db	ENOENTmsg,10,0
  1013 0000047A 696C65206F72206469-
  1014 00000483 726563746F72790A00 
  1015 0000048C 4E6F20737563682070-     	ESRCHerr:			db	ESRCHmsg,10,0
  1016 00000495 726F636573730A00   
  1017 0000049D 496E74657272757074-     	EINTRerr:			db	EINTRmsg,10,0
  1018 000004A6 65642073797374656D-
  1019 000004AF 2063616C6C0A00     
  1020 000004B6 492F4F206572726F72-     	EIOerr:				db	EIOmsg,10,0
  1021 000004BF 0A00               
  1022 000004C1 4E6F20737563682064-     	ENXIOerr:			db	ENXIOmsg,10,0
  1023 000004CA 6576696365206F7220-
  1024 000004D3 616464726573730A00 
  1025 000004DC 417267756D656E7420-     	E2BIGerr:			db	E2BIGmsg,10,0
  1026 000004E5 6C69737420746F6F20-
  1027 000004EE 6C6F6E670A00       
  1028 000004F4 4578656320666F726D-     	ENOEXECerr:			db	ENOEXECmsg,10,0
  1029 000004FD 6174206572726F720A-
  1030 00000506 00                 
  1031 00000507 4261642066696C6520-     	EBADFerr:			db	EBADFmsg,10,0
  1032 00000510 6E756D6265720A00   
  1033 00000518 4E6F206368696C6420-     	ECHILDerr:			db	ECHILDmsg,10,0
  1034 00000521 70726F636573736573-
  1035 0000052A 0A00               
  1036 0000052C 54727920616761696E-     	EAGAINerr:			db	EAGAINmsg,10,0
  1037 00000535 0A00               
  1038 00000537 4F7574206F66206D65-     	ENOMEMerr:			db	ENOMEMmsg,10,0
  1039 00000540 6D6F72790A00       
  1040 00000546 5065726D697373696F-     	EACCESerr:			db	EACCESmsg,10,0
  1041 0000054F 6E2064656E6965640A-
  1042 00000558 00                 
  1043 00000559 426164206164647265-     	EFAULTerr:			db	EFAULTmsg,10,0
  1044 00000562 73730A00           
  1045 00000566 426C6F636B20646576-     	ENOTBLKerr:			db	ENOTBLKmsg,10,0
  1046 0000056F 696365207265717569-
  1047 00000578 7265640A00         
  1048 0000057D 446576696365206F72-     	EBUSYerr:			db	EBUSYmsg,10,0
  1049 00000586 207265736F75726365-
  1050 0000058F 20627573790A00     
  1051 00000596 46696C652065786973-     	EEXISTerr:			db	EEXISTmsg,10,0
  1052 0000059F 74730A00           
  1053 000005A3 43726F73732D646576-     	EXDEVerr:			db	EXDEVmsg,10,0
  1054 000005AC 696365206C696E6B0A-
  1055 000005B5 00                 
  1056 000005B6 4E6F20737563682064-     	ENODEVerr:			db	ENODEVmsg,10,0
  1057 000005BF 65766963650A00     
  1058 000005C6 4E6F74206120646972-     	ENOTDIRerr:			db	ENOTDIRmsg,10,0
  1059 000005CF 6563746F72790A00   
  1060 000005D7 497320612064697265-     	EISDIRerr:			db	EISDIRmsg,10,0
  1061 000005E0 63746F72790A00     
  1062 000005E7 496E76616C69642061-     	EINVALerr:			db	EINVALmsg,10,0
  1063 000005F0 7267756D656E740A00 
  1064 000005F9 46696C65207461626C-     	ENFILEerr:			db	ENFILEmsg,10,0
  1065 00000602 65206F766572666C6F-
  1066 0000060B 770A00             
  1067 0000060E 546F6F206D616E7920-     	EMFILEerr:			db	EMFILEmsg,10,0
  1068 00000617 6F70656E2066696C65-
  1069 00000620 730A00             
  1070 00000623 4E6F74206120747970-     	ENOTTYerr:			db	ENOTTYmsg,10,0
  1071 0000062C 657772697465720A00 
  1072 00000635 546578742066696C65-     	ETXTBSYerr:			db	ETXTBSYmsg,10,0
  1073 0000063E 20627573790A00     
  1074 00000645 46696C6520746F6F20-     	EFBIGerr:			db	EFBIGmsg,10,0
  1075 0000064E 6C617267650A00     
  1076 00000655 4E6F20737061636520-     	ENOSPCerr:			db	ENOSPCmsg,10,0
  1077 0000065E 6C656674206F6E2064-
  1078 00000667 65766963650A00     
  1079 0000066E 496C6C6567616C2073-     	ESPIPEerr:			db	ESPIPEmsg,10,0
  1080 00000677 65656B0A00         
  1081 0000067C 526561642D6F6E6C79-     	EROFSerr:			db	EROFSmsg,10,0
  1082 00000685 2066696C6520737973-
  1083 0000068E 74656D0A00         
  1084 00000693 546F6F206D616E7920-     	EMLINKerr:			db	EMLINKmsg,10,0
  1085 0000069C 6C696E6B730A00     
  1086 000006A3 42726F6B656E207069-     	EPIPEerr:			db	EPIPEmsg,10,0
  1087 000006AC 70650A00           
  1088 000006B0 4D6174682061726775-     	EDOMerr:			db	EDOMmsg,10,0
  1089 000006B9 6D656E74206F757420-
  1090 000006C2 6F6620646F6D61696E-
  1091 000006CB 206F662066756E630A-
  1092 000006D4 00                 
  1093 000006D5 4D6174682072657375-     	ERANGEerr:			db	ERANGEmsg,10,0
  1094 000006DE 6C74206E6F74207265-
  1095 000006E7 70726573656E746162-
  1096 000006F0 6C650A00           
  1097 000006F4 5265736F7572636520-     	EDEADLKerr:			db	EDEADLKmsg,10,0
  1098 000006FD 646561646C6F636B20-
  1099 00000706 776F756C64206F6363-
  1100 0000070F 75720A00           
  1101 00000713 46696C65206E616D65-     	ENAMETOOLONGerr:	db	ENAMETOOLONGmsg,10,0
  1102 0000071C 20746F6F206C6F6E67-
  1103 00000725 0A00               
  1104 00000727 4E6F207265636F7264-     	ENOLCKerr:			db	ENOLCKmsg,10,0
  1105 00000730 206C6F636B73206176-
  1106 00000739 61696C61626C650A00 
  1107 00000742 46756E6374696F6E20-     	ENOSYSerr:			db	ENOSYSmsg,10,0
  1108 0000074B 6E6F7420696D706C65-
  1109 00000754 6D656E7465640A00   
  1110 0000075C 4469726563746F7279-     	ENOTEMPTYerr:		db	ENOTEMPTYmsg,10,0
  1111 00000765 206E6F7420656D7074-
  1112 0000076E 790A00             
  1113 00000771 546F6F206D616E7920-     	ELOOPerr:			db	ELOOPmsg,10,0
  1114 0000077A 73796D626F6C696320-
  1115 00000783 6C696E6B7320656E63-
  1116 0000078C 6F756E74657265640A-
  1117 00000795 00                 
  1118 00000796 4F7065726174696F6E-     	EWOULDBLOCKerr:		db	EWOULDBLOCKmsg,10,0
  1119 0000079F 20776F756C6420626C-
  1120 000007A8 6F636B0A00         
  1121 000007AD 4E6F206D6573736167-     	ENOMSGerr:			db	ENOMSGmsg,10,0
  1122 000007B6 65206F662064657369-
  1123 000007BF 72656420747970650A-
  1124 000007C8 00                 
  1125 000007C9 4964656E7469666965-     	EIDRMerr:			db	EIDRMmsg,10,0
  1126 000007D2 722072656D6F766564-
  1127 000007DB 0A00               
  1128 000007DD 4368616E6E656C206E-     	ECHRNGerr:			db	ECHRNGmsg,10,0
  1129 000007E6 756D626572206F7574-
  1130 000007EF 206F662072616E6765-
  1131 000007F8 0A00               
  1132 000007FA 4C6576656C2032206E-     	EL2NSYNCerr:		db	EL2NSYNCmsg,10,0
  1133 00000803 6F742073796E636872-
  1134 0000080C 6F6E697A65640A00   
  1135 00000814 4C6576656C20332068-     	EL3HLTerr:			db	EL3HLTmsg,10,0
  1136 0000081D 616C7465640A00     
  1137 00000824 4C6576656C20332072-     	EL3RSTerr:			db	EL3RSTmsg,10,0
  1138 0000082D 657365740A00       
  1139 00000833 4C696E6B206E756D62-     	ELNRNGerr:			db	ELNRNGmsg,10,0
  1140 0000083C 6572206F7574206F66-
  1141 00000845 2072616E67650A00   
  1142 0000084D 50726F746F636F6C20-     	EUNATCHerr:			db	EUNATCHmsg,10,0
  1143 00000856 647269766572206E6F-
  1144 0000085F 742061747461636865-
  1145 00000868 640A00             
  1146 0000086B 4E6F20435349207374-     	ENOCSIerr:			db	ENOCSImsg,10,0
  1147 00000874 727563747572652061-
  1148 0000087D 7661696C61626C650A-
  1149 00000886 00                 
  1150 00000887 4C6576656C20322068-     	EL2HLTerr:			db	EL2HLTmsg,10,0
  1151 00000890 616C7465640A00     
  1152 00000897 496E76616C69642065-     	EBADEerr:			db	EBADEmsg,10,0
  1153 000008A0 786368616E67650A00 
  1154 000008A9 496E76616C69642072-     	EBADRerr:			db	EBADRmsg,10,0
  1155 000008B2 657175657374206465-
  1156 000008BB 7363726970746F720A-
  1157 000008C4 00                 
  1158 000008C5 45786368616E676520-     	EXFULLerr:			db	EXFULLmsg,10,0
  1159 000008CE 66756C6C0A00       
  1160 000008D4 4E6F20616E6F64650A-     	ENOANOerr:			db	ENOANOmsg,10,0
  1161 000008DD 00                 
  1162 000008DE 496E76616C69642072-     	EBADRQCerr:			db	EBADRQCmsg,10,0
  1163 000008E7 65717565737420636F-
  1164 000008F0 64650A00           
  1165 000008F4 496E76616C69642073-     	EBADSLTerr:			db	EBADSLTmsg,10,0
  1166 000008FD 6C6F740A00         
  1167 00000902 5265736F7572636520-     	EDEADLOCKerr:		db	EDEADLOCKmsg,10,0
  1168 0000090B 646561646C6F636B20-
  1169 00000914 776F756C64206F6363-
  1170 0000091D 75720A00           
  1171 00000921 42616420666F6E7420-     	EBFONTerr:			db	EBFONTmsg,10,0
  1172 0000092A 66696C6520666F726D-
  1173 00000933 61740A00           
  1174 00000937 446576696365206E6F-     	ENOSTRerr:			db	ENOSTRmsg,10,0
  1175 00000940 742061207374726561-
  1176 00000949 6D0A00             
  1177 0000094C 4E6F20646174612061-     	ENODATAerr:			db	ENODATAmsg,10,0
  1178 00000955 7661696C61626C650A-
  1179 0000095E 00                 
  1180 0000095F 54696D657220657870-     	ETIMEerr:			db	ETIMEmsg,10,0
  1181 00000968 697265640A00       
  1182 0000096E 4F7574206F66207374-     	ENOSRerr:			db	ENOSRmsg,10,0
  1183 00000977 7265616D7320726573-
  1184 00000980 6F75726365730A00   
  1185 00000988 4D616368696E652069-     	ENONETerr:			db	ENONETmsg,10,0
  1186 00000991 73206E6F74206F6E20-
  1187 0000099A 746865206E6574776F-
  1188 000009A3 726B0A00           
  1189 000009A7 5061636B616765206E-     	ENOPKGerr:			db	ENOPKGmsg,10,0
  1190 000009B0 6F7420696E7374616C-
  1191 000009B9 6C65640A00         
  1192 000009BE 4F626A656374206973-     	EREMOTEerr:			db	EREMOTEmsg,10,0
  1193 000009C7 2072656D6F74650A00 
  1194 000009D0 4C696E6B2068617320-     	ENOLINKerr:			db	ENOLINKmsg,10,0
  1195 000009D9 6265656E2073657665-
  1196 000009E2 7265640A00         
  1197 000009E7 416476657274697365-     	EADVerr:			db	EADVmsg,10,0
  1198 000009F0 206572726F720A00   
  1199 000009F8 53726D6F756E742065-     	ESRMNTerr:			db	ESRMNTmsg,10,0
  1200 00000A01 72726F720A00       
  1201 00000A07 436F6D6D756E696361-     	ECOMMerr:			db	ECOMMmsg,10,0
  1202 00000A10 74696F6E206572726F-
  1203 00000A19 72206F6E2073656E64-
  1204 00000A22 0A00               
  1205 00000A24 50726F746F636F6C20-     	EPROTOerr:			db	EPROTOmsg,10,0
  1206 00000A2D 6572726F720A00     
  1207 00000A34 4D756C7469686F7020-     	EMULTIHOPerr:		db	EMULTIHOPmsg,10,0
  1208 00000A3D 617474656D70746564-
  1209 00000A46 0A00               
  1210 00000A48 524653207370656369-     	EDOTDOTerr:			db	EDOTDOTmsg,10,0
  1211 00000A51 666963206572726F72-
  1212 00000A5A 0A00               
  1213 00000A5C 4E6F74206120646174-     	EBADMSGerr:			db	EBADMSG,10,0
  1214 00000A65 61206D657373616765-
  1215 00000A6E 0A00               
  1216 00000A70 56616C756520746F6F-     	EOVERFLOWerr:		db	EOVERFLOWmsg,10,0
  1217 00000A79 206C6172676520666F-
  1218 00000A82 7220646566696E6564-
  1219 00000A8B 206461746120747970-
  1220 00000A94 650A00             
  1221 00000A97 4E616D65206E6F7420-     	ENOTUNIQerr:		db	ENOTUNIQmsg,10,0
  1222 00000AA0 756E69717565206F6E-
  1223 00000AA9 206E6574776F726B0A-
  1224 00000AB2 00                 
  1225 00000AB3 46696C652064657363-     	EBADFDerr:			db	EBADFDmsg,10,0
  1226 00000ABC 726970746F7220696E-
  1227 00000AC5 206261642073746174-
  1228 00000ACE 650A00             
  1229 00000AD1 52656D6F7465206164-     	EREMCHGerr:			db	EREMCHGmsg,10,0
  1230 00000ADA 647265737320636861-
  1231 00000AE3 6E6765640A00       
  1232 00000AE9 43616E206E6F742061-     	ELIBACCerr:			db	ELIBACCmsg,10,0
  1233 00000AF2 63636573732061206E-
  1234 00000AFB 656564656420736861-
  1235 00000B04 726564206C69627261-
  1236 00000B0D 72790A00           
  1237 00000B11 416363657373696E67-     	ELIBBADerr:			db	ELIBBADmsg,10,0
  1238 00000B1A 206120636F72727570-
  1239 00000B23 746564207368617265-
  1240 00000B2C 64206C696272617279-
  1241 00000B35 0A00               
  1242 00000B37 2E6C69622073656374-     	ELIBSCNerr:			db	ELIBSCNmsg,10,0
  1243 00000B40 696F6E20696E20612E-
  1244 00000B49 6F757420636F727275-
  1245 00000B52 707465640A00       
  1246 00000B58 417474656D7074696E-     	ELIBMAXerr:			db	ELIBMAXmsg,10,0
  1247 00000B61 6720746F206C696E6B-
  1248 00000B6A 20696E20746F6F206D-
  1249 00000B73 616E79207368617265-
  1250 00000B7C 64206C696272617269-
  1251 00000B85 65730A00           
  1252 00000B89 43616E6E6F74206578-     	ELIBEXECerr:		db	ELIBEXECmsg,10,0
  1253 00000B92 656320612073686172-
  1254 00000B9B 6564206C6962726172-
  1255 00000BA4 79206469726563746C-
  1256 00000BAD 790A00             
  1257 00000BB0 496C6C6567616C2062-     	EILSEQerr:			db	EILSEQmsg,10,0
  1258 00000BB9 797465207365717565-
  1259 00000BC2 6E63650A00         
  1260 00000BC7 496E74657272757074-     	ERESTARTerr:		db	ERESTARTmsg,10,0
  1261 00000BD0 65642073797374656D-
  1262 00000BD9 2063616C6C2073686F-
  1263 00000BE2 756C64206265207265-
  1264 00000BEB 737461727465640A00 
  1265 00000BF4 53747265616D732070-     	ESTRPIPEerr:		db	ESTRPIPEmsg,10,0
  1266 00000BFD 697065206572726F72-
  1267 00000C06 0A00               
  1268 00000C08 546F6F206D616E7920-     	EUSERSerr:			db	EUSERSmsg,10,0
  1269 00000C11 75736572730A00     
  1270 00000C18 536F636B6574206F70-     	ENOTSOCKerr:		db	ENOTSOCKmsg,10,0
  1271 00000C21 65726174696F6E206F-
  1272 00000C2A 6E206E6F6E2D736F63-
  1273 00000C33 6B65740A00         
  1274 00000C38 44657374696E617469-     	EDESTADDRREQerr:	db	EDESTADDRREQmsg,10,0
  1275 00000C41 6F6E20616464726573-
  1276 00000C4A 732072657175697265-
  1277 00000C53 640A00             
  1278 00000C56 4D6573736167652074-     	EMSGSIZEerr:		db	EMSGSIZEmsg,10,0
  1279 00000C5F 6F6F206C6F6E670A00 
  1280 00000C68 50726F746F636F6C20-     	EPROTOTYPEerr:		db	EPROTOTYPEmsg,10,0
  1281 00000C71 77726F6E6720747970-
  1282 00000C7A 6520666F7220736F63-
  1283 00000C83 6B65740A00         
  1284 00000C88 50726F746F636F6C20-     	ENOPROTOOPTerr:		db	ENOPROTOOPTmsg,10,0
  1285 00000C91 6E6F7420617661696C-
  1286 00000C9A 61626C650A00       
  1287 00000CA0 50726F746F636F6C20-     	EPROTONOSUPPORTerr:	db	EPROTONOSUPPORTmsg,10,0
  1288 00000CA9 6E6F7420737570706F-
  1289 00000CB2 727465640A00       
  1290 00000CB8 536F636B6574207479-     	ESOCKTNOSUPPORTerr:	db	ESOCKTNOSUPPORTmsg,10,0
  1291 00000CC1 7065206E6F74207375-
  1292 00000CCA 70706F727465640A00 
  1293 00000CD3 4F7065726174696F6E-     	EOPNOTSUPPerr:		db	EOPNOTSUPPmsg,10,0
  1294 00000CDC 206E6F742073757070-
  1295 00000CE5 6F72746564206F6E20-
  1296 00000CEE 7472616E73706F7274-
  1297 00000CF7 20656E64706F696E74-
  1298 00000D00 0A00               
  1299 00000D02 50726F746F636F6C20-     	EPFNOSUPPORTerr:	db	EPFNOSUPPORTmsg,10,0
  1300 00000D0B 66616D696C79206E6F-
  1301 00000D14 7420737570706F7274-
  1302 00000D1D 65640A00           
  1303 00000D21 416464726573732066-     	EAFNOSUPPORTerr:	db	EAFNOSUPPORTmsg,10,0
  1304 00000D2A 616D696C79206E6F74-
  1305 00000D33 20737570706F727465-
  1306 00000D3C 642062792070726F74-
  1307 00000D45 6F636F6C0A00       
  1308 00000D4B 416464726573732061-     	EADDRINUSEerr:		db	EADDRINUSEmsg,10,0
  1309 00000D54 6C726561647920696E-
  1310 00000D5D 207573650A00       
  1311 00000D63 43616E6E6F74206173-     	EADDRNOTAVAILerr:	db	EADDRNOTAVAILmsg,10,0
  1312 00000D6C 7369676E2072657175-
  1313 00000D75 657374656420616464-
  1314 00000D7E 726573730A00       
  1315 00000D84 4E6574776F726B2069-     	ENETDOWNerr:		db	ENETDOWNmsg,10,0
  1316 00000D8D 7320646F776E0A00   
  1317 00000D95 4E6574776F726B2069-     	ENETUNREACHerr:		db	ENETUNREACHmsg,10,0
  1318 00000D9E 7320756E7265616368-
  1319 00000DA7 61626C650A00       
  1320 00000DAD 4E6574776F726B2064-     	ENETRESETerr:		db	ENETRESETmsg,10,0
  1321 00000DB6 726F7070656420636F-
  1322 00000DBF 6E6E656374696F6E20-
  1323 00000DC8 62656361757365206F-
  1324 00000DD1 662072657365740A00 
  1325 00000DDA 536F66747761726520-     	ECONNABORTEDerr:	db	ECONNABORTEDmsg,10,0
  1326 00000DE3 63617573656420636F-
  1327 00000DEC 6E6E656374696F6E20-
  1328 00000DF5 61626F72740A00     
  1329 00000DFC 436F6E6E656374696F-     	ECONNRESETerr:		db	ECONNRESETmsg,10,0
  1330 00000E05 6E2072657365742062-
  1331 00000E0E 7920706565720A00   
  1332 00000E16 4E6F20627566666572-     	ENOBUFSerr:			db	ENOBUFSmsg,10,0
  1333 00000E1F 207370616365206176-
  1334 00000E28 61696C61626C650A00 
  1335 00000E31 5472616E73706F7274-     	EISCONNerr:			db	EISCONNmsg,10,0
  1336 00000E3A 20656E64706F696E74-
  1337 00000E43 20697320616C726561-
  1338 00000E4C 647920636F6E6E6563-
  1339 00000E55 7465640A00         
  1340 00000E5A 5472616E73706F7274-     	ENOTCONNerr:		db	ENOTCONNmsg,10,0
  1341 00000E63 20656E64706F696E74-
  1342 00000E6C 206973206E6F742063-
  1343 00000E75 6F6E6E65637465640A-
  1344 00000E7E 00                 
  1345 00000E7F 43616E6E6F74207365-     	ESHUTDOWNerr:		db	ESHUTDOWNmsg,10,0
  1346 00000E88 6E6420616674657220-
  1347 00000E91 7472616E73706F7274-
  1348 00000E9A 20656E64706F696E74-
  1349 00000EA3 2073687574646F776E-
  1350 00000EAC 0A00               
  1351 00000EAE 546F6F206D616E7920-     	ETOOMANYREFSerr:	db	ETOOMANYREFSmsg,10,0
  1352 00000EB7 7265666572656E6365-
  1353 00000EC0 733A2063616E6E6F74-
  1354 00000EC9 2073706C6963650A00 
  1355 00000ED2 436F6E6E656374696F-     	ETIMEDOUTerr:		db	ETIMEDOUTmsg,10,0
  1356 00000EDB 6E2074696D6564206F-
  1357 00000EE4 75740A00           
  1358 00000EE8 436F6E6E656374696F-     	ECONNREFUSEDerr:	db	ECONNREFUSEDmsg,10,0
  1359 00000EF1 6E2072656675736564-
  1360 00000EFA 0A00               
  1361 00000EFC 486F73742069732064-     	EHOSTDOWNerr:		db	EHOSTDOWNmsg,10,0
  1362 00000F05 6F776E0A00         
  1363 00000F0A 4E6F20726F75746520-     	EHOSTUNREACHerr:	db	EHOSTUNREACHmsg,10,0
  1364 00000F13 746F20686F73740A00 
  1365 00000F1C 4F7065726174696F6E-     	EALREADYerr:		db	EALREADYmsg,10,0
  1366 00000F25 20616C726561647920-
  1367 00000F2E 696E2070726F677265-
  1368 00000F37 73730A00           
  1369 00000F3B 4F7065726174696F6E-     	EINPROGRESSerr:		db	EINPROGRESSmsg,10,0
  1370 00000F44 206E6F7720696E2070-
  1371 00000F4D 726F67726573730A00 
  1372 00000F56 5374616C65204E4653-     	ESTALEerr:			db	ESTALEmsg,10,0
  1373 00000F5F 2066696C652068616E-
  1374 00000F68 646C650A00         
  1375 00000F6D 537472756374757265-     	EUCLEANerr:			db	EUCLEANmsg,10,0
  1376 00000F76 206E6565647320636C-
  1377 00000F7F 65616E696E670A00   
  1378 00000F87 4E6F7420612058454E-     	ENOTNAMerr:			db	ENOTNAMmsg,10,0
  1379 00000F90 4958206E616D656420-
  1380 00000F99 747970652066696C65-
  1381 00000FA2 0A00               
  1382 00000FA4 4E6F2058454E495820-     	ENAVAILerr:			db	ENAVAILmsg,10,0
  1383 00000FAD 73656D6170686F7265-
  1384 00000FB6 7320617661696C6162-
  1385 00000FBF 6C650A00           
  1386 00000FC3 49732061206E616D65-     	EISNAMerr:			db	EISNAMmsg,10,0
  1387 00000FCC 642074797065206669-
  1388 00000FD5 6C650A00           
  1389 00000FD9 52656D6F746520492F-     	EREMOTEIOerr:		db	EREMOTEIOmsg,10,0
  1390 00000FE2 4F206572726F720A00 
  1391 00000FEB 51756F746120657863-     	EDQUOTerr:			db	EDQUOTmsg,10,0
  1392 00000FF4 65656465640A00     
  1393 00000FFB 4E6F206D656469756D-     	ENOMEDIUMerr:		db	ENOMEDIUMmsg,10,0
  1394 00001004 20666F756E640A00   
  1395 0000100C 57726F6E67206D6564-     	EMEDIUMTYPEerr:		db	EMEDIUMTYPEmsg,10,0
  1396 00001015 69756D20747970650A-
  1397 0000101E 00                 
  1398 0000101F 4F7065726174696F6E-     	ECANCELEDerr:		db	ECANCELEDmsg,10,0
  1399 00001028 2043616E63656C6564-
  1400 00001031 0A00               
  1401 00001033 526571756972656420-     	ENOKEYerr:			db	ENOKEYmsg,10,0
  1402 0000103C 6B6579206E6F742061-
  1403 00001045 7661696C61626C650A-
  1404 0000104E 00                 
  1405 0000104F 4B6579206861732065-     	EKEYEXPIREDerr:		db	EKEYEXPIREDmsg,10,0
  1406 00001058 7870697265640A00   
  1407 00001060 4B6579206861732062-     	EKEYREVOKEDerr:		db	EKEYREVOKEDmsg,10,0
  1408 00001069 65656E207265766F6B-
  1409 00001072 65640A00           
  1410 00001076 4B6579207761732072-     	EKEYREJECTEDerr:	db	EKEYREJECTEDmsg,10,0
  1411 0000107F 656A65637465642062-
  1412 00001088 792073657276696365-
  1413 00001091 0A00               
  1414 00001093 4F776E657220646965-     	EOWNERDEADerr:		db	EOWNERDEADmsg,10,0
  1415 0000109C 640A00             
  1416 0000109F 5374617465206E6F74-     	ENOTRECOVERABLEerr:	db	ENOTRECOVERABLEmsg,10,0
  1417 000010A8 207265636F76657261-
  1418 000010B1 626C650A00         
  1419 000010B6 4F7065726174696F6E-     	ERFKILLerr:			db	ERFKILLmsg,10,0
  1420 000010BF 206E6F7420706F7373-
  1421 000010C8 69626C652064756520-
  1422 000010D1 746F2052462D6B696C-
  1423 000010DA 6C0A00             
  1424 000010DD 4D656D6F7279207061-     	EHWPOISONerr:		db	EHWPOISONmsg,10,0
  1425 000010E6 676520686173206861-
  1426 000010EF 726477617265206572-
  1427 000010F8 726F720A00         
  1428                                  	; custom error messages
  1429 000010FD 75736167653A207065-         ESHOWUSAGEerr:      db  "usage: pem1asm sourcefile -o binaryfile",10,0
  1430 00001106 6D3161736D20736F75-
  1431 0000110F 72636566696C65202D-
  1432 00001118 6F2062696E61727966-
  1433 00001121 696C650A00         
  1434 00001126 696C6567616C206F70-         EILEGALOPTIONerr:	db	"ilegal option, use -o for destination file",10,0
  1435 0000112F 74696F6E2C20757365-
  1436 00001138 202D6F20666F722064-
  1437 00001141 657374696E6174696F-
  1438 0000114A 6E2066696C650A00   
  1439 00001152 46696C652065786973-         EFILEEXISTSerr:		db  "File exists, overwrite? [Y/n] ",0
  1440 0000115B 74732C206F76657277-
  1441 00001164 726974653F205B592F-
  1442 0000116D 6E5D2000           
  1443 00001171 4E6F74207573696E67-         ENOTUSINGerr:		db	"Not using destination file name as requested, exiting.",10,0
  1444 0000117A 2064657374696E6174-
  1445 00001183 696F6E2066696C6520-
  1446 0000118C 6E616D652061732072-
  1447 00001195 65717565737465642C-
  1448 0000119E 2065786974696E672E-
  1449 000011A7 0A00               
  1450 000011A9 2D20496C6C6567616C-         EILEGALCHARerr:		db	"- Illegal character in sourceline ",10,0
  1451 000011B2 206368617261637465-
  1452 000011BB 7220696E20736F7572-
  1453 000011C4 63656C696E65200A00 
  1454                                      
  1455 000011CD 3A20                        COLONmsg:			db	": "
  1456                                      COLONmsg.length:	equ	$-COLONmsg
  1457 000011CF 0A                          CRLFmsg:			db	10
  1458                                      CRLFmsg.length:		equ $-CRLFmsg
  1459                                      
  1460 000011D0 000000000000000000-         addresses:			db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  1461 000011D9 00000000000000     
  1462 000011E0 000000000000000000-         binary:             db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0			;db		"TEST BINARY FILE",10
  1463 000011E9 00000000000000     
  1464                                      binary.length:		equ		$-binary
  1465                                          
  1466                                      ; stat structure
  1467                                      STAT stat
  1468                              <1>  %1: ISTRUC STAT_STRUC
  1469 000011F0 0000000000000000    <1>  at STAT_STRUC.st_dev, dq 0
  1470 000011F8 0000000000000000    <1>  at STAT_STRUC.st_ino, dq 0
  1471 00001200 0000000000000000    <1>  at STAT_STRUC.st_nlink, dq 0
  1472 00001208 00000000            <1>  at STAT_STRUC.st_mod, dd 0
  1473 0000120C 00000000            <1>  at STAT_STRUC.st_uid, dd 0
  1474 00001210 00000000            <1>  at STAT_STRUC.st_gid, dd 0
  1475 00001214 0000000000000000    <1>  at STAT_STRUC.st_rdev, dq 0
  1476 0000121C 00000000            <1>  at STAT_STRUC._pad1, dd 0
  1477 00001220 0000000000000000    <1>  at STAT_STRUC.st_size, dq 0
  1478 00001228 00000000            <1>  at STAT_STRUC.st_blksize, dd 0
  1479 0000122C 00000000            <1>  at STAT_STRUC._pad2, dd 0
  1480 00001230 0000000000000000    <1>  at STAT_STRUC.st_blocks, dq 0
  1481 00001238 0000000000000000    <1>  at STAT_STRUC.st_atime, dq 0
  1482 00001240 0000000000000000    <1>  at STAT_STRUC.st_atime_nsec, dq 0
  1483 00001248 0000000000000000    <1>  at STAT_STRUC.st_mtime, dq 0
  1484 00001250 0000000000000000    <1>  at STAT_STRUC.st_mtime_nsec, dq 0
  1485 00001258 0000000000000000    <1>  at STAT_STRUC.st_ctime, dq 0
  1486 00001260 0000000000000000    <1>  at STAT_STRUC.st_ctime_nsec, dq 0
  1487 00001268 0000000000000000    <1>  at STAT_STRUC._unused1, dq 0
  1488 00001270 0000000000000000    <1>  at STAT_STRUC._unused2, dq 0
  1489 00001278 0000000000000000    <1>  at STAT_STRUC._unused3, dq 0
  1490                              <1>  IEND
  1491                              <1> 
  1492                              <1> 
  1493                              <1> 
  1494                              <1>  %define %1.st_dev %1+STAT_STRUC.st_dev
  1495                              <1>  %define %1.st_ino %1+STAT_STRUC.st_ino
  1496                              <1>  %define %1.st_nlink %1+STAT_STRUC.st_nlink
  1497                              <1>  %define %1.st_mod %1+STAT_STRUC.st_mod
  1498                              <1>  %define %1.st_uid %1+STAT_STRUC.st_uid
  1499                              <1>  %define %1.st_gid %1+STAT_STRUC.st_gid
  1500                              <1>  %define %1.st_rdev %1+STAT_STRUC.st_rdev
  1501                              <1>  %define %1._pad1 %1+STAT_STRUC._pad1
  1502                              <1>  %define %1.st_size %1+STAT_STRUC.st_size
  1503                              <1>  %define %1.st_blksize %1+STAT_STRUC.st_blksize
  1504                              <1>  %define %1._pad2 %1+STAT_STRUC._pad2
  1505                              <1>  %define %1.st_blocks %1+STAT_STRUC.st_blocks
  1506                              <1>  %define %1.st_atime %1+STAT_STRUC.st_atime
  1507                              <1>  %define %1.st_atime_nsec %1+STAT_STRUC.st_atime_nsec
  1508                              <1>  %define %1.st_mtime %1+STAT_STRUC.st_mtime
  1509                              <1>  %define %1.st_mtime_nsec %1+STAT_STRUC.st_mtime_nsec
  1510                              <1>  %define %1.st_ctime %1+STAT_STRUC.st_ctime
  1511                              <1>  %define %1.st_ctime_nsec %1+STAT_STRUC.st_ctime_nsec
  1512                              <1>  %define %1._unused1 %1+STAT_STRUC._unused1
  1513                              <1>  %define %1._unused2 %1+STAT_STRUC._unused2
  1514                              <1>  %define %1._unused3 %1+STAT_STRUC._unused3
  1515                                  	TERMIOS termios
  1516                              <1>  %1: ISTRUC TERMIOS_STRUC
  1517 00001280 00000000            <1>  at TERMIOS_STRUC.c_iflag, dd 0
  1518 00001284 00000000            <1>  at TERMIOS_STRUC.c_oflag, dd 0
  1519 00001288 00000000            <1>  at TERMIOS_STRUC.c_cflag, dd 0
  1520 0000128C 00000000            <1>  at TERMIOS_STRUC.c_lflag, dd 0
  1521 00001290 00                  <1>  at TERMIOS_STRUC.c_line, db 0
  1522 00001291 00<rept>            <1>  at TERMIOS_STRUC.c_cc, times 19 db 0
  1523                              <1>  IEND
  1524                              <1>  %define %1.c_iflag %1+TERMIOS_STRUC.c_iflag
  1525                              <1>  %define %1.c_oflag %1+TERMIOS_STRUC.c_oflag
  1526                              <1>  %define %1.c_cflag %1+TERMIOS_STRUC.c_cflag
  1527                              <1>  %define %1.c_lflag %1+TERMIOS_STRUC.c_lflag
  1528                              <1>  %define %1.c_line %1+TERMIOS_STRUC.c_line
  1529                              <1>  %define %1.c_cc %1+TERMIOS_STRUC.c_cc
  1530                                  	
  1531                                  section .text
  1532                                  
  1533                                  global _start
  1534                                  _start:
  1535                                  
  1536 00000000 58                          pop     rax             	; argc
  1537 00000001 4883F804                    cmp     rax, ARGC
  1538 00000005 7402                        je      parseCommandLine	; argumentcount is correct
  1539 00000007 EB1E                        jmp		usage
  1540                                  parseCommandLine:    
  1541 00000009 58                          pop     rax					; pointer to programname
  1542 0000000A 5E                          pop     rsi					; pointer to sourcefilename
  1543 0000000B 58                          pop     rax					; read option -o
  1544 0000000C 5F                          pop		rdi					; pointer to destination file
  1545 0000000D 668B00                      mov     ax, WORD[rax]
  1546 00000010 663D2D6F                    cmp     ax, "-o"			; option -o?
  1547 00000014 7427                        je      checkFiles
  1548 00000016 48C7C079FFFFFF              mov		rax, EILEGALOPTION
  1549 0000001D E8A2030000                  call	getError
  1550 00000022 E82D040000                  call	PrintSTDERR
  1551                                  usage:
  1552 00000027 48C7C07AFFFFFF              mov		rax, ESHOWUSAGE
  1553 0000002E E891030000                  call	getError
  1554 00000033 E81C040000                  call	PrintSTDERR
  1555 00000038 E966030000                  jmp		exit
  1556                                  
  1557                                  checkFiles:
  1558                                      ; RSI has the pointer to the sourcefile
  1559                                      ; RDI has the pointer to the destinationfile
  1560                                      
  1561 0000003D 48893425[10000000]          mov     QWORD[ptrSourceFile], rsi
  1562 00000045 48893C25[18000000]          mov     QWORD[ptrDestinationFile], rdi
  1563                                      
  1564                                      ; Open the source file
  1565 0000004D 488B3C25[10000000]          mov     rdi, QWORD [ptrSourceFile]
  1566 00000055 BE00000000                  mov     rsi, O_RDONLY
  1567 0000005A B802000000                  mov     rax, SYS_OPEN
  1568 0000005F 0F05                        syscall
  1569 00000061 4883F800                    cmp     rax, 0
  1570 00000065 7F12                        jg      gotfdsource							; we got a filedescriptor
  1571 00000067 488B3425[10000000]          mov		rsi, QWORD [ptrSourceFile]
  1572 0000006F E885030000                  call	PrintFileError
  1573 00000074 E92A030000                  jmp		exit
  1574                                  gotfdsource:
  1575                                  	; save the descriptor for later use
  1576 00000079 48890425[00000000]          mov     [fdsource], rax
  1577                                      
  1578                                      ; try to open the destination file
  1579 00000081 488B3C25[18000000]          mov     rdi, QWORD[ptrDestinationFile]
  1580 00000089 BE02000000                  mov     rsi, O_RDWR							; open in read/write mode
  1581 0000008E B802000000                  mov     rax, SYS_OPEN
  1582 00000093 0F05                        syscall
  1583 00000095 4883F800                    cmp     rax, 0              				; file exists?
  1584 00000099 7C6B                        jl      createfile          				; file doesn't exists, create it
  1585                                      
  1586 0000009B 48890425[08000000]          mov		QWORD[fddestination], rax			; save fd
  1587 000000A3 488B3425[18000000]          mov		rsi, QWORD [ptrDestinationFile]
  1588 000000AB 48C7C078FFFFFF              mov		rax, EFILEEXISTS		
  1589 000000B2 E842030000                  call	PrintFileError
  1590                                      
  1591                                  continueWaiting:
  1592 000000B7 E8BE030000                  call	WaitForKeyPress
  1593 000000BC 3C59                        cmp		al,"Y"
  1594 000000BE 7404                        je		gotAnswer
  1595 000000C0 3C6E                        cmp		al,"n"
  1596 000000C2 75F3                        jne		continueWaiting      
  1597                                  gotAnswer:
  1598 000000C4 50                      	push	rax						; save the answer
  1599                                  	; print the users answer
  1600 000000C5 48BE-                   	mov		rsi, buffer
  1601 000000C7 [0000000000000000] 
  1602 000000CF BA01000000              	mov		rdx, 1
  1603 000000D4 E895030000              	call	Print
  1604 000000D9 48BE-                   	mov		rsi, CRLFmsg
  1605 000000DB [CF11000000000000] 
  1606 000000E3 E886030000              	call	Print
  1607 000000E8 58                          pop		rax						; retrieve the answer
  1608 000000E9 3C59                        cmp		al,"Y"
  1609 000000EB 744D                        je		startAssembling
  1610                                      
  1611                                      ; we may not use the existing destination file,
  1612                                      ; inform user and quit
  1613 000000ED 488B3425[18000000]          mov		rsi, QWORD[ptrDestinationFile]
  1614 000000F5 48C7C077FFFFFF              mov		rax, ENOTUSING
  1615 000000FC E8F8020000                  call	PrintFileError
  1616 00000101 E97F020000                  jmp		closeDestinationFile
  1617                                      
  1618                                  createfile:
  1619                                      ; file doesn't exists, create the file with permissions 644 octal,
  1620                                      ; taking umask in consideration
  1621 00000106 488B3C25[18000000]          mov     rdi, QWORD [ptrDestinationFile]
  1622 0000010E BEA4010000                  mov     rsi, 644q              ; access mode
  1623 00000113 B855000000                  mov     rax, SYS_CREAT
  1624 00000118 0F05                        syscall
  1625                                      ; if we got a file descriptor then the file is created
  1626 0000011A 4883F800                    cmp     rax, 0
  1627 0000011E 7D12                        jge     savefddestination
  1628                                      ; we got an error creating the file, inform user and close fd source
  1629 00000120 488B3425[18000000]          mov		rsi, QWORD [ptrDestinationFile]
  1630 00000128 E8CC020000                  call	PrintFileError
  1631 0000012D E962020000                  jmp		closeSourceFile
  1632                                      
  1633                                  savefddestination:
  1634 00000132 48890425[08000000]          mov		QWORD[fddestination], rax
  1635                                      
  1636                                      ; START OF ASSEMBLING
  1637                                      
  1638                                  startAssembling:
  1639                                  
  1640                                  ; read the length of the source file
  1641 0000013A 488B3C25[00000000]      	mov		rdi, QWORD[fdsource]
  1642 00000142 48BE-                   	mov		rsi, stat
  1643 00000144 [F011000000000000] 
  1644 0000014C B805000000              	mov		rax, SYS_FSTAT
  1645 00000151 0F05                    	syscall
  1646 00000153 4883F800                	cmp		rax, 0
  1647 00000157 0F8CF9010000            	jl		fileStatError
  1648                                              
  1649                                  readFileSize:
  1650 0000015D 488B0C25[20120000]      	mov   	rcx, QWORD [stat.st_size]   	; get the file size
  1651 00000165 C60425[39000000]01      	mov		BYTE[firstCharInLine], 1		; set first char in line true
  1652 0000016D C60425[38000000]00      	mov		BYTE[ignoreLine], 0				; set ignore line false
  1653                                  	; start reading file contents
  1654                                        
  1655                                  readFileContents:
  1656                                  	    
  1657                                  	; for all bytes in file do
  1658 00000175 51                      	push  	rcx
  1659 00000176 48BE-                   	mov   	rsi, buffer
  1660 00000178 [0000000000000000] 
  1661 00000180 BA01000000              	mov   	rdx, 1          				; read one char at the time
  1662 00000185 B800000000              	mov   	rax, SYS_READ
  1663 0000018A 0F05                    	syscall
  1664 0000018C 4883F800                	cmp		rax, 0
  1665 00000190 0F8EC0010000            	jle		fileStatError					; in case of an error treat it as a file status error
  1666                                        
  1667                                  	; no read error, start parsing
  1668 00000196 8A0425[00000000]        	mov		al, BYTE[buffer]
  1669 0000019D 3C0A                    	cmp		al, 0x0A
  1670 0000019F 7404                    	je		eol
  1671 000001A1 3C0D                    	cmp		al, 0x0D  
  1672 000001A3 7522                    	jne		noeol
  1673                                  eol:
  1674 000001A5 48830425[30000000]-     	add		QWORD[sourcelines],1
  1675 000001AD 01                 
  1676 000001AE 48C70425[20000000]-     	mov		QWORD[charcount],1
  1677 000001B6 01000000           
  1678 000001BA C60425[38000000]00      	mov		BYTE[ignoreLine], 0				; if EOL in remark line set ignore line false
  1679 000001C2 E961010000              	jmp		readNextByte     
  1680                                  noeol:
  1681 000001C7 3C23                    	cmp		al, '#'							; if remark, ignore all following chars until 0x0A is met
  1682 000001C9 750D                    	jne		nocomment						; else try interpreting
  1683 000001CB C60425[38000000]01      	mov		BYTE[ignoreLine], 1				; set ignore line true
  1684 000001D3 E950010000              	jmp		readNextByte
  1685                                  		  
  1686                                  nocomment:
  1687 000001D8 803C25[38000000]01      	cmp		BYTE[ignoreLine],1
  1688 000001E0 0F8442010000            	je		readNextByte					; if ignore line true then don't parse
  1689                                  											; else start interpreting									
  1690 000001E6 3C20                    	cmp		al, ' '							
  1691 000001E8 0F843A010000            	je		readNextByte					; if a space is met, read the next byte
  1692                                  
  1693 000001EE 3C09                    	cmp		al, 0x09						
  1694 000001F0 0F8432010000            	je		readNextByte					; if a tab is met, read the next byte
  1695                                  
  1696                                  position1:
  1697                                  	; must be 'R' followed by hexadecimal digit
  1698 000001F6 48833C25[20000000]-     	cmp		QWORD[charcount],1
  1699 000001FE 01                 
  1700 000001FF 751A                    	jne		position2
  1701 00000201 3C52                    	cmp		al, 'R'
  1702 00000203 0F850C010000            	jne		illegalChar
  1703 00000209 48FF0425[20000000]      	inc		QWORD[charcount]
  1704 00000211 E812020000              	call	PrintChar
  1705 00000216 E90D010000              	jmp		readNextByte
  1706                                  
  1707                                  position2:
  1708                                  	; must be hexadecimal digit
  1709 0000021B 48833C25[20000000]-     	cmp 	QWORD[charcount],2
  1710 00000223 02                 
  1711 00000224 751D                    	jne		position3
  1712 00000226 E884010000              	call	checkHexDigit
  1713 0000022B 0F82E4000000            	jc		illegalChar
  1714 00000231 48FF0425[20000000]      	inc		QWORD[charcount]
  1715                                  	; check the bytes in addresses for R, if already set, print a warning
  1716                                  	
  1717 00000239 E8EA010000              	call	PrintChar
  1718 0000023E E9E5000000              	jmp		readNextByte
  1719                                  			
  1720                                  position3:
  1721                                  	; read rest of mnemonic
  1722 00000243 48833C25[20000000]-     	cmp		QWORD[charcount], 3
  1723 0000024B 03                 
  1724 0000024C 757A                    	jne		position4
  1725 0000024E 59                      	pop		rcx
  1726 0000024F 4883E902                	sub		rcx, 2
  1727 00000253 51                      	push	rcx
  1728 00000254 BA02000000              	mov		rdx, 2
  1729 00000259 48BE-                   	mov		rsi, buffer+1
  1730 0000025B [0100000000000000] 
  1731 00000263 B800000000              	mov		rax, SYS_READ
  1732 00000268 0F05                    	syscall
  1733 0000026A 4883F800                	cmp		rax, 0
  1734 0000026E 0F8EE2000000            	jle		fileStatError					; in case of an error treat it as a file status error
  1735 00000274 488B0425[00000000]      	mov		rax, QWORD[buffer]
  1736 0000027C 483D4C444100            	cmp		rax, 'LDA'
  1737 00000282 7434                    	je		legalMnemonic
  1738 00000284 483D41444400            	cmp		rax, 'ADD'
  1739 0000028A 742C                    	je		legalMnemonic
  1740 0000028C 483D53554200            	cmp		rax, 'SUB'
  1741 00000292 7424                    	je		legalMnemonic
  1742 00000294 483D4F555400            	cmp		rax, 'OUT'
  1743 0000029A 741C                    	je		legalMnemonic
  1744 0000029C 483D484C5400            	cmp		rax, 'HLT'
  1745 000002A2 7414                    	je		legalMnemonic
  1746                                  	; beside an mnemonic, the memory address can contain only data, this must be an 8 bit binary number
  1747                                  	; preseeded with the .DB or .db directive
  1748 000002A4 483D2E444200            	cmp		rax, '.DB'
  1749 000002AA 7569                    	jne		illegalChar
  1750 000002AC 48C70425[28000000]-     	mov		QWORD[databytes],1
  1751 000002B4 01000000           
  1752                                  			
  1753                                  legalMnemonic:
  1754 000002B8 48830425[20000000]-     	add		QWORD[charcount],1
  1755 000002C0 01                 
  1756 000002C1 E86D010000              	call	PrintMnemonic
  1757 000002C6 EB60                    	jmp		readNextByte
  1758                                  
  1759                                  position4:
  1760                                  	; must be hexadecimal digit
  1761 000002C8 48833C25[20000000]-     	cmp 	QWORD[charcount],4
  1762 000002D0 04                 
  1763 000002D1 7516                    	jne		position5			
  1764 000002D3 E8D7000000              	call	checkHexDigit
  1765 000002D8 723B                    	jc		illegalChar
  1766 000002DA 48FF0425[20000000]      	inc		QWORD[charcount]
  1767 000002E2 E841010000              	call	PrintChar
  1768 000002E7 EB3F                    	jmp		readNextByte
  1769                                  		
  1770                                  position5:
  1771 000002E9 48833C25[28000000]-     	cmp		QWORD[databytes], 1
  1772 000002F1 01                 
  1773 000002F2 7521                    	jne		illegalChar
  1774 000002F4 48833C25[20000000]-     	cmp 	QWORD[charcount], 5
  1775 000002FC 05                 
  1776 000002FD 7516                    	jne		illegalChar
  1777 000002FF E8AB000000              	call	checkHexDigit
  1778 00000304 720F                    	jc		illegalChar		
  1779 00000306 48FF0425[20000000]      	inc		QWORD[charcount]
  1780 0000030E E815010000              	call	PrintChar
  1781 00000313 EB13                    	jmp		readNextByte
  1782                                  
  1783                                  ; we may never get here
  1784                                  illegalChar:
  1785 00000315 48C7C076FFFFFF          	mov		rax, EILEGALCHAR
  1786 0000031C E8A3000000              	call	getError
  1787 00000321 E83B010000              	call	PrintSTDOUT
  1788 00000326 EB5D                    	jmp   	closeDestinationFile  
  1789                                  
  1790                                  readNextByte:	  
  1791 00000328 59                      	pop		rcx
  1792 00000329 48FFC9                  	dec		rcx
  1793 0000032C 4883F900                	cmp		rcx, 0
  1794 00000330 0F853FFEFFFF            	jne		readFileContents  
  1795                                  
  1796                                  
  1797                                  ; END OF ASSEMBLING
  1798                                  		
  1799                                  endAssembling:
  1800                                      ; save the assembled binary
  1801 00000336 488B3C25[08000000]          mov		rdi, QWORD[fddestination]
  1802 0000033E 48BE-                       mov		rsi, binary
  1803 00000340 [E011000000000000] 
  1804 00000348 BA10000000                  mov		rdx, binary.length
  1805 0000034D B801000000                  mov		rax, SYS_WRITE
  1806 00000352 0F05                        syscall
  1807 00000354 EB2F                    	jmp		closeDestinationFile
  1808                                  	
  1809                                  fileStatError:
  1810 00000356 488B3425[10000000]      	mov		rsi, QWORD[ptrSourceFile]
  1811 0000035E E896000000              	call	PrintFileError
  1812                                  	
  1813                                  deleteDestinationFile:	
  1814 00000363 488B3C25[18000000]      	mov		rdi, QWORD[ptrDestinationFile]
  1815 0000036B B857000000              	mov		rax, SYS_UNLINK
  1816 00000370 0F05                    	syscall
  1817 00000372 4883F800                	cmp		rax, 0
  1818 00000376 7D0D                    	jge		closeDestinationFile
  1819 00000378 488B3425[18000000]      	mov		rsi, QWORD[ptrDestinationFile]
  1820 00000380 E874000000              	call	PrintFileError
  1821                                  
  1822                                  closeDestinationFile:
  1823 00000385 488B3C25[08000000]      	mov		rdi, QWORD[fddestination]
  1824 0000038D B803000000              	mov		rax, SYS_CLOSE
  1825 00000392 0F05                    	syscall
  1826                                  closeSourceFile:	
  1827 00000394 488B3C25[00000000]      	mov		rdi, QWORD[fdsource]
  1828 0000039C B803000000              	mov		rax, SYS_CLOSE
  1829 000003A1 0F05                    	syscall
  1830                                  	   
  1831                                  exit:        
  1832 000003A3 BF00000000                  mov     rdi, 0
  1833 000003A8 B83C000000                  mov     rax, SYS_EXIT
  1834 000003AD 0F05                        syscall
  1835                                  ;*********************************************
  1836                                  ; END PROGRAM
  1837                                  ;*********************************************
  1838                                  
  1839                                  ; SUBROUTINES
  1840                                  
  1841                                  checkHexDigit:
  1842                                  	; AL has the number, on return if Carry is set the digit isn't a hexdigit
  1843 000003AF F9                      	stc							; assume wrong digit
  1844 000003B0 3C30                    	cmp		al, '0'
  1845 000003B2 7C0F                    	jl		.illegal
  1846 000003B4 3C39                    	cmp		al,	'9'
  1847 000003B6 760A                    	jbe		.isdigit
  1848 000003B8 244F                    	and		al, 4Fh				; make capital A...F
  1849 000003BA 3C41                    	cmp		al, 'A'
  1850 000003BC 7C05                    	jl		.illegal
  1851 000003BE 3C46                    	cmp		al, 'F'
  1852 000003C0 7701                    	ja		.illegal
  1853                                  .isdigit:
  1854 000003C2 F8                      	clc
  1855                                  .illegal:
  1856 000003C3 C3                      	ret
  1857                                  	
  1858                                  getError:
  1859                                  	; RAX has the error number
  1860 000003C4 48F7D8                  	neg		rax						; get positive value
  1861 000003C7 48FFC8                  	dec		rax						; decrement to adjust in list
  1862 000003CA 48C1E003                	shl		rax, 3					; multiplicate with 8 (8 bytes = 64 bits)
  1863 000003CE 488BB0[08000000]        	mov		rsi, [errorList+rax] 	; load the error message pointer
  1864 000003D5 E801000000              	call	getStringLength
  1865 000003DA C3                      	ret
  1866                                  	
  1867                                  getStringLength:
  1868                                  	; RSI has the pointer to the string	
  1869 000003DB 50                      	push	rax
  1870 000003DC 51                      	push	rcx
  1871 000003DD 57                      	push	rdi
  1872 000003DE 4889F7                  	mov		rdi, rsi
  1873 000003E1 48C7C1FFFFFFFF          	mov     rcx, -1					; calculate the length
  1874 000003E8 30C0                        xor     al, al            		; search for terminating 0
  1875 000003EA F2AE                        repne   scasb
  1876 000003EC 48F7D9                      neg     rcx
  1877 000003EF 48FFC9                      dec     rcx
  1878 000003F2 4889CA                      mov		rdx, rcx				; length in RDX
  1879 000003F5 5F                          pop		rdi
  1880 000003F6 59                          pop		rcx
  1881 000003F7 58                          pop		rax
  1882 000003F8 C3                      	ret
  1883                                  
  1884                                  PrintFileError:
  1885                                  	; RAX has the errornumber
  1886                                  	; RSI has the pointer to the filename
  1887 000003F9 56                      	push	rsi
  1888 000003FA 50                      	push	rax
  1889 000003FB 50                      	push	rax	      
  1890 000003FC E8DAFFFFFF                  call	getStringLength
  1891 00000401 E84E000000                  call	PrintSTDERR
  1892 00000406 48BE-                       mov		rsi, COLONmsg
  1893 00000408 [CD11000000000000] 
  1894 00000410 BA02000000                  mov		rdx, COLONmsg.length
  1895 00000415 E83A000000                  call	PrintSTDERR
  1896 0000041A 58                          pop		rax
  1897 0000041B E8A4FFFFFF                  call	getError
  1898 00000420 E82F000000                  call	PrintSTDERR
  1899 00000425 58                      	pop		rax
  1900 00000426 5E                      	pop		rsi
  1901 00000427 C3                      	ret
  1902                                  
  1903                                  PrintChar:
  1904 00000428 BA01000000              	  mov   rdx, 1
  1905 0000042D E80C000000              	  call	PrintBuffer
  1906 00000432 C3                      	  ret
  1907                                  	  
  1908                                  PrintMnemonic:
  1909 00000433 BA03000000              	  mov   rdx, 3
  1910 00000438 E801000000              	  call	PrintBuffer
  1911 0000043D C3                      	  ret
  1912                                  	  	  
  1913                                  PrintBuffer:	  
  1914 0000043E 51                      	  push	rcx
  1915 0000043F 56                      	  push	rsi
  1916 00000440 52                      	  push	rdx
  1917 00000441 48BE-                   	  mov	rsi, buffer
  1918 00000443 [0000000000000000] 
  1919 0000044B E811000000              	  call	PrintSTDOUT
  1920 00000450 5A                      	  pop	rdx
  1921 00000451 5E                      	  pop	rsi
  1922 00000452 59                      	  pop	rcx
  1923 00000453 C3                      	  ret
  1924                                  
  1925                                  PrintSTDERR:
  1926                                  	  ; RSI has the pointer to the string
  1927                                  	  ; RDX has the length to the string
  1928 00000454 57                      	  push	rdi
  1929 00000455 BF02000000              	  mov	rdi, STDERR
  1930 0000045A E80F000000              	  call	Print
  1931 0000045F 5F                      	  pop	rdi
  1932 00000460 C3                      	  ret
  1933                                        
  1934                                  PrintSTDOUT:
  1935 00000461 57                      	  push	rdi
  1936 00000462 BF01000000              	  mov	rdi, STDOUT
  1937 00000467 E802000000              	  call	Print
  1938 0000046C 5F                      	  pop	rdi
  1939 0000046D C3                      	  ret
  1940                                  	  
  1941                                  Print:	  
  1942 0000046E 50                            push  rax
  1943 0000046F 51                            push  rcx
  1944 00000470 B801000000                    mov   rax, SYS_WRITE
  1945 00000475 0F05                          syscall
  1946 00000477 59                            pop   rcx
  1947 00000478 58                            pop   rax
  1948 00000479 C3                            ret		
  1949                                  
  1950                                  WaitForKeyPress:
  1951                                  	; read a key without echoing it back and put the key in a buffer
  1952                                  	; the buffer is 1 byte long
  1953 0000047A E839000000              	call    TermIOS.Canonical.OFF      ; switch canonical mode off
  1954 0000047F E842000000                  call    TermIOS.Echo.OFF           ; no echo
  1955 00000484 48BE-                       mov     rsi, buffer
  1956 00000486 [0000000000000000] 
  1957 0000048E BA01000000                  mov     rdx, 1
  1958 00000493 BF00000000                  mov     rdi, STDIN
  1959 00000498 B800000000                  mov     rax, SYS_READ
  1960 0000049D 0F05                        syscall
  1961                                      ; Don't forget to switch canonical mode en echo back on
  1962 0000049F E80D000000                  call    TermIOS.Canonical.ON       ; switch canonical mode back on
  1963 000004A4 E816000000                  call    TermIOS.Echo.ON            ; echo on
  1964 000004A9 8A0425[00000000]            mov		al, BYTE[buffer]
  1965 000004B0 C3                          ret
  1966                                      
  1967                                  ; **********************************************************************************************    
  1968                                  ; TERMIOS functions:
  1969                                  ; TermIOS.Canonical.ON        : switch canonical mode on
  1970                                  ; TermIOS.Canonical.OFF       : switch canonical mode off
  1971                                  ; TermIOS.Echo.ON             : switch echo mode on
  1972                                  ; TermIOS.Echo.OFF            : switch echo mode off
  1973                                  ; TermIOS.LocalModeFlag.SET   : set the localmode flag described in RAX
  1974                                  ; TermIOS.LocalModeFlag.CLEAR : clear the localmode flag described in RAX 
  1975                                  ; TermIOS.STDIN.Read          : Read the TERMIO flags
  1976                                  ; TermIOS.STDIN.Write         : Write the TERMIO flags
  1977                                  ; TermIOS.IOCTL               : Read or write the localmode flags to or from TERMIOS
  1978                                  ; **********************************************************************************************
  1979                                  
  1980                                  TermIOS.Canonical:
  1981                                  .ON:
  1982 000004B1 B802000000                  mov     rax, ICANON
  1983 000004B6 EB15                        jmp     TermIOS.LocalModeFlag.SET
  1984                                  .OFF:
  1985 000004B8 B802000000                  mov     rax,ICANON
  1986 000004BD EB20                        jmp     TermIOS.LocalModeFlag.CLEAR
  1987                                  TermIOS.Echo:
  1988                                  .ON:
  1989 000004BF B80A000000                  mov     rax,ECHO
  1990 000004C4 EB07                        jmp     TermIOS.LocalModeFlag.SET
  1991                                  .OFF:
  1992 000004C6 B80A000000                  mov     rax,ECHO
  1993 000004CB EB12                        jmp     TermIOS.LocalModeFlag.CLEAR
  1994                                  TermIOS.LocalModeFlag:
  1995                                  .SET:
  1996 000004CD E821000000                  call    TermIOS.STDIN.READ
  1997 000004D2 090425[8C120000]            or      dword [termios.c_lflag], eax
  1998 000004D9 E81C000000                  call    TermIOS.STDIN.WRITE
  1999 000004DE C3                          ret
  2000                                  .CLEAR:
  2001 000004DF E80F000000                  call    TermIOS.STDIN.READ
  2002 000004E4 F7D0                        not     eax
  2003 000004E6 210425[8C120000]            and     [termios.c_lflag], eax
  2004 000004ED E808000000                  call    TermIOS.STDIN.WRITE
  2005 000004F2 C3                          ret
  2006                                  ; subroutine for all TCGETS operation on the syscall IOCTL
  2007                                  ; the original value of RCX is restored on exit
  2008                                  TermIOS.STDIN:
  2009                                  .READ:
  2010 000004F3 BE01540000                  mov     rsi, TCGETS
  2011 000004F8 EB05                        jmp     TermIOS.IOCTL
  2012                                  ; subroutine for all TCSETS operation on the syscall IOCTL
  2013                                  ; the original value of RCX is restored on exit
  2014                                  .WRITE:
  2015 000004FA BE02540000                  mov     rsi, TCSETS
  2016                                  ; subroutine for operations on the syscall IOCTL for STDIN
  2017                                  ; all registers are restored to their original values on exit of the subroutine
  2018                                  TermIOS.IOCTL:
  2019 000004FF 50                          push    rax             ; we need to store RAX or TermIOS.LocalFlag functions fail
  2020 00000500 B810000000                  mov     rax, SYS_IOCTL
  2021 00000505 BF00000000                  mov     rdi, STDIN
  2022 0000050A 48BA-                       mov     rdx, termios
  2023 0000050C [8012000000000000] 
  2024 00000514 0F05                        syscall
  2025 00000516 58                          pop     rax
  2026 00000517 C3                          ret
