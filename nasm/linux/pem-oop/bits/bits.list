     1                                  ; Name:         bits.asm
     2                                  ; Build:        see makefile
     3                                  ; Description:  Testprogram for PEM1
     4                                  
     5                                  BITS 64
     6                                  
   778                                  [list -]
   779                                  
   780                                  section .bss
   781                                      
   782                                  section .data
   783 00000000 626974206120686173-         message1:    db "bit a has changed - "
   784 00000009 206368616E67656420-
   785 00000012 2D20               
   786                                       .length:    equ $-message1
   787 00000014 626974206220686173-         message2:    db "bit b has changed - "
   788 0000001D 206368616E67656420-
   789 00000026 2D20               
   790                                       .length:    equ $-message2
   791 00000028 626974206973207365-         message3:    db "bit is set",10
   792 00000031 740A               
   793                                       .length:    equ $-message3
   794 00000033 626974206973207265-         message4:    db "bit is reset",10
   795 0000003C 7365740A           
   796                                       .length:    equ $-message4
   797                                       
   798                                      BIT a
   799                              <1> 
   800                              <1>  %ifndef BITMACROS
   801                              <1>  %define BITMACROS
   802                              <1> 
   803                              <1>  %macro BITSET 1
   804                              <1>  mov rax, %1+BIT_STRUC.Set
   805                              <1>  call QWORD [rax]
   806                              <1>  %endmacro
   807                              <1> 
   808                              <1>  %macro BITRESET 1
   809                              <1>  mov rax, %1+BIT_STRUC.Reset
   810                              <1>  call QWORD [rax]
   811                              <1>  %endmacro
   812                              <1> 
   813                              <1>  %macro BITINVERT 1
   814                              <1>  mov rax, %1+BIT_STRUC.Invert
   815                              <1>  call QWORD [rax]
   816                              <1>  %endmacro
   817                              <1> 
   818                              <1>  %macro BITGET 1
   819                              <1>  mov rax, %1+BIT_STRUC.Get
   820                              <1>  call QWORD [rax]
   821                              <1>  %endmacro
   822                              <1> 
   823                              <1>  %macro BITLOAD 1
   824                              <1>  mov rax, %1+BIT_STRUC.Load
   825                              <1>  call QWORD [rax]
   826                              <1>  %endmacro
   827                              <1> 
   828                              <1>  %macro BITONCHANGED 1
   829                              <1>  mov rax, %1+BIT_STRUC.OnChanged
   830                              <1>  mov [rax], rdx
   831                              <1>  %endmacro
   832                              <1> 
   833                              <1>  %macro BITONSET 1
   834                              <1>  mov rax, %1+BIT_STRUC.OnSet
   835                              <1>  mov [rax], rdx
   836                              <1>  %endmacro
   837                              <1> 
   838                              <1>  %macro BITONRESET 1
   839                              <1>  mov rax, %1+BIT_STRUC.OnReset
   840                              <1>  mov [rax], rdx
   841                              <1>  %endmacro
   842                              <1> 
   843                              <1>  %endif
   844                              <1> 
   845                              <1>  %define %1.ptr %1+BIT_STRUC.value
   846                              <1>  %define %1.Set BITSET %1
   847                              <1>  %define %1.Reset BITRESET %1
   848                              <1>  %define %1.Invert BITINVERT %1
   849                              <1>  %define %1.Get BITGET %1
   850                              <1>  %define %1.Load BITLOAD %1
   851                              <1>  %define %1.OnChanged BITONCHANGED %1
   852                              <1>  %define %1.OnSet BITONSET %1
   853                              <1>  %define %1.OnReset BITONRESET %1
   854                              <1>  %define %1.value BYTE [%1+BIT_STRUC.value]
   855                              <1> 
   856                              <1>  [section .data]
   857                              <1>  %1: ISTRUC BIT_STRUC
   858 00000040 00                  <1>  at BIT_STRUC.value, db 0
   859 00000041 [1400000000000000]  <1>  at BIT_STRUC.Set, dq BITSet
   860 00000049 [0900000000000000]  <1>  at BIT_STRUC.Reset, dq BITReset
   861 00000051 [2900000000000000]  <1>  at BIT_STRUC.Invert, dq BITInvert
   862 00000059 [1F00000000000000]  <1>  at BIT_STRUC.Get, dq BITGet
   863 00000061 [0000000000000000]  <1>  at BIT_STRUC.Load, dq BITLoad
   864 00000069 0000000000000000    <1>  at BIT_STRUC.OnChanged, dq 0
   865 00000071 0000000000000000    <1>  at BIT_STRUC.OnSet, dq 0
   866 00000079 0000000000000000    <1>  at BIT_STRUC.OnReset, dq 0
   867                              <1>  IEND
   868                                      BIT b
   869                              <1> 
   870                              <1>  %ifndef BITMACROS
   871                              <1>  %define BITMACROS
   872                              <1> 
   873                              <1>  %macro BITSET 1
   874                              <1>  mov rax, %1+BIT_STRUC.Set
   875                              <1>  call QWORD [rax]
   876                              <1>  %endmacro
   877                              <1> 
   878                              <1>  %macro BITRESET 1
   879                              <1>  mov rax, %1+BIT_STRUC.Reset
   880                              <1>  call QWORD [rax]
   881                              <1>  %endmacro
   882                              <1> 
   883                              <1>  %macro BITINVERT 1
   884                              <1>  mov rax, %1+BIT_STRUC.Invert
   885                              <1>  call QWORD [rax]
   886                              <1>  %endmacro
   887                              <1> 
   888                              <1>  %macro BITGET 1
   889                              <1>  mov rax, %1+BIT_STRUC.Get
   890                              <1>  call QWORD [rax]
   891                              <1>  %endmacro
   892                              <1> 
   893                              <1>  %macro BITLOAD 1
   894                              <1>  mov rax, %1+BIT_STRUC.Load
   895                              <1>  call QWORD [rax]
   896                              <1>  %endmacro
   897                              <1> 
   898                              <1>  %macro BITONCHANGED 1
   899                              <1>  mov rax, %1+BIT_STRUC.OnChanged
   900                              <1>  mov [rax], rdx
   901                              <1>  %endmacro
   902                              <1> 
   903                              <1>  %macro BITONSET 1
   904                              <1>  mov rax, %1+BIT_STRUC.OnSet
   905                              <1>  mov [rax], rdx
   906                              <1>  %endmacro
   907                              <1> 
   908                              <1>  %macro BITONRESET 1
   909                              <1>  mov rax, %1+BIT_STRUC.OnReset
   910                              <1>  mov [rax], rdx
   911                              <1>  %endmacro
   912                              <1> 
   913                              <1>  %endif
   914                              <1> 
   915                              <1>  %define %1.ptr %1+BIT_STRUC.value
   916                              <1>  %define %1.Set BITSET %1
   917                              <1>  %define %1.Reset BITRESET %1
   918                              <1>  %define %1.Invert BITINVERT %1
   919                              <1>  %define %1.Get BITGET %1
   920                              <1>  %define %1.Load BITLOAD %1
   921                              <1>  %define %1.OnChanged BITONCHANGED %1
   922                              <1>  %define %1.OnSet BITONSET %1
   923                              <1>  %define %1.OnReset BITONRESET %1
   924                              <1>  %define %1.value BYTE [%1+BIT_STRUC.value]
   925                              <1> 
   926                              <1>  [section .data]
   927                              <1>  %1: ISTRUC BIT_STRUC
   928 00000081 00                  <1>  at BIT_STRUC.value, db 0
   929 00000082 [1400000000000000]  <1>  at BIT_STRUC.Set, dq BITSet
   930 0000008A [0900000000000000]  <1>  at BIT_STRUC.Reset, dq BITReset
   931 00000092 [2900000000000000]  <1>  at BIT_STRUC.Invert, dq BITInvert
   932 0000009A [1F00000000000000]  <1>  at BIT_STRUC.Get, dq BITGet
   933 000000A2 [0000000000000000]  <1>  at BIT_STRUC.Load, dq BITLoad
   934 000000AA 0000000000000000    <1>  at BIT_STRUC.OnChanged, dq 0
   935 000000B2 0000000000000000    <1>  at BIT_STRUC.OnSet, dq 0
   936 000000BA 0000000000000000    <1>  at BIT_STRUC.OnReset, dq 0
   937                              <1>  IEND
   938                                      
   939                                  section .text
   940                                      global _start
   941                                  _start:
   942                                  
   943 0000006B 48BA-                       mov rdx, OnBitChanged 
   944 0000006D [6101000000000000] 
   945                                      a.OnChanged
   946 00000075 48B8-               <1>  mov rax, %1+BIT_STRUC.OnChanged
   947 00000077 [6900000000000000]  <1>
   948 0000007F 488910              <1>  mov [rax], rdx
   949                                      
   950                                      ; mov rdx, OnBitBChanged 
   951                                      b.OnChanged
   952 00000082 48B8-               <1>  mov rax, %1+BIT_STRUC.OnChanged
   953 00000084 [AA00000000000000]  <1>
   954 0000008C 488910              <1>  mov [rax], rdx
   955                                      
   956 0000008F 48BA-                       mov rdx, OnBitSet
   957 00000091 [7D01000000000000] 
   958                                      a.OnSet
   959 00000099 48B8-               <1>  mov rax, %1+BIT_STRUC.OnSet
   960 0000009B [7100000000000000]  <1>
   961 000000A3 488910              <1>  mov [rax], rdx
   962                                      
   963 000000A6 803C25[40000000]01          cmp a.value, 1
   964                                      
   965                                      b.OnSet
   966 000000AE 48B8-               <1>  mov rax, %1+BIT_STRUC.OnSet
   967 000000B0 [B200000000000000]  <1>
   968 000000B8 488910              <1>  mov [rax], rdx
   969 000000BB 48BA-                       mov rdx, OnBitReset
   970 000000BD [9901000000000000] 
   971                                      a.OnReset
   972 000000C5 48B8-               <1>  mov rax, %1+BIT_STRUC.OnReset
   973 000000C7 [7900000000000000]  <1>
   974 000000CF 488910              <1>  mov [rax], rdx
   975                                      b.OnReset   
   976 000000D2 48B8-               <1>  mov rax, %1+BIT_STRUC.OnReset
   977 000000D4 [BA00000000000000]  <1>
   978 000000DC 488910              <1>  mov [rax], rdx
   979                                      
   980                                      a.Set
   981 000000DF 48B8-               <1>  mov rax, %1+BIT_STRUC.Set
   982 000000E1 [4100000000000000]  <1>
   983 000000E9 FF10                <1>  call QWORD [rax]
   984                                      a.Set
   985 000000EB 48B8-               <1>  mov rax, %1+BIT_STRUC.Set
   986 000000ED [4100000000000000]  <1>
   987 000000F5 FF10                <1>  call QWORD [rax]
   988                                      a.Set
   989 000000F7 48B8-               <1>  mov rax, %1+BIT_STRUC.Set
   990 000000F9 [4100000000000000]  <1>
   991 00000101 FF10                <1>  call QWORD [rax]
   992                                      a.Reset
   993 00000103 48B8-               <1>  mov rax, %1+BIT_STRUC.Reset
   994 00000105 [4900000000000000]  <1>
   995 0000010D FF10                <1>  call QWORD [rax]
   996                                      a.Reset
   997 0000010F 48B8-               <1>  mov rax, %1+BIT_STRUC.Reset
   998 00000111 [4900000000000000]  <1>
   999 00000119 FF10                <1>  call QWORD [rax]
  1000                                      a.Invert
  1001 0000011B 48B8-               <1>  mov rax, %1+BIT_STRUC.Invert
  1002 0000011D [5100000000000000]  <1>
  1003 00000125 FF10                <1>  call QWORD [rax]
  1004                                      a.Invert
  1005 00000127 48B8-               <1>  mov rax, %1+BIT_STRUC.Invert
  1006 00000129 [5100000000000000]  <1>
  1007 00000131 FF10                <1>  call QWORD [rax]
  1008                                      ; implies a connection between bits
  1009                                      a.Get
  1010 00000133 48B8-               <1>  mov rax, %1+BIT_STRUC.Get
  1011 00000135 [5900000000000000]  <1>
  1012 0000013D FF10                <1>  call QWORD [rax]
  1013                                      b.Load
  1014 0000013F 48B8-               <1>  mov rax, %1+BIT_STRUC.Load
  1015 00000141 [A200000000000000]  <1>
  1016 00000149 FF10                <1>  call QWORD [rax]
  1017                                      
  1018                                      b.Reset
  1019 0000014B 48B8-               <1>  mov rax, %1+BIT_STRUC.Reset
  1020 0000014D [8A00000000000000]  <1>
  1021 00000155 FF10                <1>  call QWORD [rax]
  1022                                      
  1023                                      syscall.exit ENOERR
  1024                              <1> %if %1==0
  1025 00000157 4831FF              <1>  xor rdi, rdi
  1026                              <1> %elif
  1027                              <1>  mov rdi, %2
  1028                              <1> %endif
  1029 0000015A B83C000000          <1>  mov rax, SYS_EXIT
  1030 0000015F 0F05                <1>  syscall
  1031                                  
  1032                                  OnBitChanged:
  1033                                      syscall.write message1
  1034 00000161 BF01000000          <1>  mov rdi, STDOUT
  1035 00000166 48BE-               <1>  mov rsi, %1
  1036 00000168 [0000000000000000]  <1>
  1037 00000170 BA14000000          <1>  mov rdx, %1.length
  1038 00000175 B801000000          <1>  mov rax, SYS_WRITE
  1039 0000017A 0F05                <1>  syscall
  1040 0000017C C3                          ret
  1041                                  OnBitSet:
  1042                                      syscall.write message3
  1043 0000017D BF01000000          <1>  mov rdi, STDOUT
  1044 00000182 48BE-               <1>  mov rsi, %1
  1045 00000184 [2800000000000000]  <1>
  1046 0000018C BA0B000000          <1>  mov rdx, %1.length
  1047 00000191 B801000000          <1>  mov rax, SYS_WRITE
  1048 00000196 0F05                <1>  syscall
  1049 00000198 C3                          ret
  1050                                  OnBitReset:
  1051                                      syscall.write message4
  1052 00000199 BF01000000          <1>  mov rdi, STDOUT
  1053 0000019E 48BE-               <1>  mov rsi, %1
  1054 000001A0 [3300000000000000]  <1>
  1055 000001A8 BA0D000000          <1>  mov rdx, %1.length
  1056 000001AD B801000000          <1>  mov rax, SYS_WRITE
  1057 000001B2 0F05                <1>  syscall
  1058 000001B4 C3                          ret
  1059                                      
  1060                                  OnBitBChanged:
  1061                                      syscall.write message2
  1062 000001B5 BF01000000          <1>  mov rdi, STDOUT
  1063 000001BA 48BE-               <1>  mov rsi, %1
  1064 000001BC [1400000000000000]  <1>
  1065 000001C4 BA14000000          <1>  mov rdx, %1.length
  1066 000001C9 B801000000          <1>  mov rax, SYS_WRITE
  1067 000001CE 0F05                <1>  syscall
  1068 000001D0 C3                          ret
