     1                                  ;Name:          pem1asm.asm
     2                                  ;Build:         see makefile
     3                                  ;Run:           ./pem1asm sourcefile -o binaryfile
     4                                  ;description:   Simple assembler for PEM1
     5                                  ;               -o creates binary file for PEM1 program.  This program cannot be run from any commandline!
     6                                  
     7                                  BITS 64
     8                                  
   681                                  [list -]
   682                                  
   683                                  %define ARGC 4
   684                                  %define O_CREAT     0100
   685                                  
   686                                  section .bss
   687 00000000 <res 00000010>              binary:             resb    16
   688 00000010 <res 00000008>              fdsource:           resq    1
   689 00000018 <res 00000008>              fddestination:      resq    1
   690 00000020 <res 00000008>              ptrSourceFile:      resq    1
   691 00000028 <res 00000008>              ptrDestinationFile: resq    1
   692                                  section .data
   693 00000000 75736167653A207065-         usageMessage:       db  "usage: pem1asm sourcefile -o binaryfile"
   694 00000009 6D3161736D20736F75-
   695 00000012 72636566696C65202D-
   696 0000001B 6F2062696E61727966-
   697 00000024 696C65             
   698                                      usageMessageL:      equ $-usageMessage
   699                                      
   700 00000027 6572726F72                  errorMessage:       db "error" ;;;;;;;
   701                                      errorMessageL:      equ $-errorMessage  ;;;;;;;;;;;;;
   702 0000002C 6572726F72206F7065-         errorOpening:       db  "error opening sourcefile: "
   703 00000035 6E696E6720736F7572-
   704 0000003E 636566696C653A20   
   705                                      errorOpeningL:       equ $-errorOpening
   706 00000046 6572726F7220637265-         errorcreatingfile:  db  "error creating destinationfile: "
   707 0000004F 6174696E6720646573-
   708 00000058 74696E6174696F6E66-
   709 00000061 696C653A20         
   710                                      errorcreatingfileL:  equ $ - errorcreatingfile
   711 00000066 64657374696E617469-         errorfileexistsp1:    db  "destination "
   712 0000006F 6F6E20             
   713                                      errorfileexistsp1L:    equ $-errorfileexistsp1
   714 00000072 2066696C6520657869-         errorfileexistsp2:    db " file exists, overwrite [Y/n]"
   715 0000007B 7374732C206F766572-
   716 00000084 7772697465205B592F-
   717 0000008D 6E5D               
   718                                      errorfileexistsp2L:    equ $-errorfileexistsp2
   719                                      
   720 0000008F 00                          charBuffer          db  0
   721 00000090 0A                          crlf                db  10
   722 00000091 00                          dataTrue            db  0
   723                                      
   724                                      ; stat structure
   725                                      STAT stat
   726                              <1>  %1: ISTRUC STAT_STRUC
   727 00000092 0000000000000000    <1>  at STAT_STRUC.st_dev, dq 0
   728 0000009A 0000000000000000    <1>  at STAT_STRUC.st_ino, dq 0
   729 000000A2 0000000000000000    <1>  at STAT_STRUC.st_nlink, dq 0
   730 000000AA 00000000            <1>  at STAT_STRUC.st_mod, dd 0
   731 000000AE 00000000            <1>  at STAT_STRUC.st_uid, dd 0
   732 000000B2 00000000            <1>  at STAT_STRUC.st_gid, dd 0
   733 000000B6 0000000000000000    <1>  at STAT_STRUC.st_rdev, dq 0
   734 000000BE 00000000            <1>  at STAT_STRUC._pad1, dd 0
   735 000000C2 0000000000000000    <1>  at STAT_STRUC.st_size, dq 0
   736 000000CA 00000000            <1>  at STAT_STRUC.st_blksize, dd 0
   737 000000CE 00000000            <1>  at STAT_STRUC._pad2, dd 0
   738 000000D2 0000000000000000    <1>  at STAT_STRUC.st_blocks, dq 0
   739 000000DA 0000000000000000    <1>  at STAT_STRUC.st_atime, dq 0
   740 000000E2 0000000000000000    <1>  at STAT_STRUC.st_atime_nsec, dq 0
   741 000000EA 0000000000000000    <1>  at STAT_STRUC.st_mtime, dq 0
   742 000000F2 0000000000000000    <1>  at STAT_STRUC.st_mtime_nsec, dq 0
   743 000000FA 0000000000000000    <1>  at STAT_STRUC.st_ctime, dq 0
   744 00000102 0000000000000000    <1>  at STAT_STRUC.st_ctime_nsec, dq 0
   745 0000010A 0000000000000000    <1>  at STAT_STRUC._unused1, dq 0
   746 00000112 0000000000000000    <1>  at STAT_STRUC._unused2, dq 0
   747 0000011A 0000000000000000    <1>  at STAT_STRUC._unused3, dq 0
   748                              <1>  IEND
   749                              <1> 
   750                              <1> 
   751                              <1> 
   752                              <1>  %define %1.st_dev %1+STAT_STRUC.st_dev
   753                              <1>  %define %1.st_ino %1+STAT_STRUC.st_ino
   754                              <1>  %define %1.st_nlink %1+STAT_STRUC.st_nlink
   755                              <1>  %define %1.st_mod %1+STAT_STRUC.st_mod
   756                              <1>  %define %1.st_uid %1+STAT_STRUC.st_uid
   757                              <1>  %define %1.st_gid %1+STAT_STRUC.st_gid
   758                              <1>  %define %1.st_rdev %1+STAT_STRUC.st_rdev
   759                              <1>  %define %1._pad1 %1+STAT_STRUC._pad1
   760                              <1>  %define %1.st_size %1+STAT_STRUC.st_size
   761                              <1>  %define %1.st_blksize %1+STAT_STRUC.st_blksize
   762                              <1>  %define %1._pad2 %1+STAT_STRUC._pad2
   763                              <1>  %define %1.st_blocks %1+STAT_STRUC.st_blocks
   764                              <1>  %define %1.st_atime %1+STAT_STRUC.st_atime
   765                              <1>  %define %1.st_atime_nsec %1+STAT_STRUC.st_atime_nsec
   766                              <1>  %define %1.st_mtime %1+STAT_STRUC.st_mtime
   767                              <1>  %define %1.st_mtime_nsec %1+STAT_STRUC.st_mtime_nsec
   768                              <1>  %define %1.st_ctime %1+STAT_STRUC.st_ctime
   769                              <1>  %define %1.st_ctime_nsec %1+STAT_STRUC.st_ctime_nsec
   770                              <1>  %define %1._unused1 %1+STAT_STRUC._unused1
   771                              <1>  %define %1._unused2 %1+STAT_STRUC._unused2
   772                              <1>  %define %1._unused3 %1+STAT_STRUC._unused3
   773                                  
   774                                  section .text
   775                                  
   776                                  global _start
   777                                  _start:
   778                                       
   779 00000000 58                          pop     rax             ; argc
   780 00000001 4883F804                    cmp     rax, ARGC
   781 00000005 0F850A020000                jne     showUsage       ; more arguments than needed
   782 0000000B 58                          pop     rax             ; pointer to programname
   783 0000000C 5E                          pop     rsi             ; pointer to sourcefilename
   784 0000000D 58                          pop     rax             ; read option -o
   785 0000000E 668B00                      mov     ax, WORD[rax]
   786 00000011 663D2D6F                    cmp     ax, "-o"        ; option -o?
   787 00000015 0F85FA010000                jne     showUsage
   788 0000001B 5F                          pop     rdi             ; read destination filename
   789 0000001C 4883FF00                    cmp     rdi, 0
   790 00000020 0F84EF010000                je      showUsage
   791                                  
   792                                      ; RSI has the pointer to the sourcefile
   793                                      ; RDI has the pointer to the destinationfile
   794                                      
   795 00000026 48893425[20000000]          mov     QWORD[ptrSourceFile], rsi
   796 0000002E 48893C25[28000000]          mov     QWORD[ptrDestinationFile], rdi
   797                                      
   798                                      ; Open the source file
   799 00000036 488B3C25[20000000]          mov     rdi, QWORD [ptrSourceFile]
   800 0000003E BE00000000                  mov     rsi, O_RDONLY
   801 00000043 B802000000                  mov     rax, SYS_OPEN
   802 00000048 0F05                        syscall
   803 0000004A 4883F800                    cmp     rax, 0
   804 0000004E 7F6B                        jg      savefdsource
   805 00000050 48BE-                       mov     rsi, errorOpening
   806 00000052 [2C00000000000000] 
   807 0000005A BA1A000000                  mov     rdx, errorOpeningL
   808 0000005F BF01000000                  mov     rdi, STDOUT
   809 00000064 B801000000                  mov     rax, SYS_WRITE
   810 00000069 0F05                        syscall
   811                                      ; calculate length for displaying the name
   812 0000006B 488B3C25[20000000]          mov     rdi,QWORD [ptrSourceFile]
   813 00000073 48C7C1FFFFFFFF              mov     rcx, -1
   814 0000007A 30C0                        xor     al, al            ; search for terminating 0
   815 0000007C F2AE                        repne   scasb
   816 0000007E 48F7D9                      neg     rcx
   817 00000081 48FFC9                      dec     rcx
   818                                      ; output source filename
   819 00000084 4889CA                      mov     rdx, rcx
   820 00000087 488B3425[20000000]          mov     rsi, QWORD [ptrSourceFile]
   821 0000008F BF01000000                  mov     rdi, STDOUT
   822 00000094 B801000000                  mov     rax, SYS_WRITE
   823 00000099 0F05                        syscall
   824                                      ; ouput a LineFeed
   825 0000009B 48BE-                       mov     rsi, crlf
   826 0000009D [9000000000000000] 
   827 000000A5 BA01000000                  mov     rdx, 1
   828 000000AA BF01000000                  mov     rdi, STDOUT
   829 000000AF B801000000                  mov     rax, SYS_WRITE
   830 000000B4 0F05                        syscall
   831 000000B6 E975010000                  jmp     exit
   832                                  savefdsource:
   833 000000BB 48890425[10000000]          mov     [fdsource], rax
   834                                      
   835                                  tryopenfile:
   836                                      ; try to open the destination file
   837 000000C3 488B3C25[28000000]          mov     rdi, QWORD[ptrDestinationFile]
   838 000000CB BE00000000                  mov     rsi, O_RDONLY
   839 000000D0 B802000000                  mov     rax, SYS_OPEN
   840 000000D5 0F05                        syscall
   841                                      ; if file doesn't exists create the file
   842 000000D7 4883F800                    cmp     rax, 0              ; file exists?
   843 000000DB 0F8C8F000000                jl      createfile          ; file doesn't exists, create it
   844                                      ; the file exists, inform user
   845                                  fileexists:
   846 000000E1 50                          push    rax                         ; save FD destination file
   847                                      ; display first part message
   848 000000E2 48BE-                       mov     rsi, errorfileexistsp1
   849 000000E4 [6600000000000000] 
   850 000000EC BA0C000000                  mov     rdx, errorfileexistsp1L
   851 000000F1 BF01000000                  mov     rdi, STDOUT
   852 000000F6 B801000000                  mov     rax, SYS_WRITE
   853 000000FB 0F05                        syscall
   854                                      ; calculate length destination filename
   855 000000FD 488B3C25[28000000]          mov     rdi, QWORD [ptrDestinationFile]
   856 00000105 48C7C1FFFFFFFF              mov     rcx, -1
   857 0000010C 30C0                        xor     al, al            ; search for terminating 0
   858 0000010E F2AE                        repne   scasb
   859 00000110 48F7D9                      neg     rcx
   860 00000113 48FFC9                      dec     rcx
   861                                      ; display destination filename
   862 00000116 4889CA                      mov     rdx, rcx
   863 00000119 488B3425[28000000]          mov     rsi, QWORD [ptrDestinationFile]
   864 00000121 BF01000000                  mov     rdi, STDOUT
   865 00000126 B801000000                  mov     rax, SYS_WRITE
   866 0000012B 0F05                        syscall
   867                                      ; display second part of message
   868 0000012D 48BE-                       mov     rsi, errorfileexistsp2
   869 0000012F [7200000000000000] 
   870 00000137 BA1D000000                  mov     rdx, errorfileexistsp2L
   871 0000013C BF01000000                  mov     rdi, STDOUT
   872 00000141 B801000000                  mov     rax, SYS_WRITE
   873 00000146 0F05                        syscall    
   874                                      ; display LineFeed
   875 00000148 48BE-                       mov     rsi, crlf
   876 0000014A [9000000000000000] 
   877 00000152 BA01000000                  mov     rdx, 1
   878 00000157 BF01000000                  mov     rdi, STDOUT
   879 0000015C B801000000                  mov     rax, SYS_WRITE
   880 00000161 0F05                        syscall
   881                                      ; close the file if it may not be overwritten
   882 00000163 5F                          pop     rdi                         ; get FD destinationfile
   883 00000164 B803000000                  mov     rax, SYS_CLOSE
   884 00000169 0F05                        syscall
   885                                      ; close the source file
   886 0000016B E994000000                  jmp     closesourcefile
   887                                      
   888                                  createfile:        
   889                                      ; file doesn't exists, create the file with permissions 644 octal, taking umask in consideration
   890 00000170 BEA4010000                  mov     rsi, 644q              ; access mode
   891 00000175 B855000000                  mov     rax, SYS_CREAT
   892 0000017A 0F05                        syscall
   893                                      ; if we got a file descriptor than the file is created
   894 0000017C 4883F800                    cmp     rax, 0
   895 00000180 7D4D                        jge     savefddestination
   896                                      ; display error creating file
   897 00000182 48BE-                       mov     rsi, errorcreatingfile
   898 00000184 [4600000000000000] 
   899 0000018C BA20000000                  mov     rdx, errorcreatingfileL
   900 00000191 BF01000000                  mov     rdi, STDOUT
   901 00000196 B801000000                  mov     rax, SYS_WRITE
   902 0000019B 0F05                        syscall
   903                                      ; calculate the length
   904 0000019D 488B3C25[28000000]          mov     rdi, QWORD [ptrDestinationFile]
   905 000001A5 48C7C1FFFFFFFF              mov     rcx, -1
   906 000001AC 30C0                        xor     al, al            ; search for terminating 0
   907 000001AE F2AE                        repne   scasb
   908 000001B0 48F7D9                      neg     rcx
   909 000001B3 48FFC9                      dec     rcx
   910                                      ; display destination file name
   911 000001B6 4889CA                      mov     rdx, rcx
   912 000001B9 488B3425[28000000]          mov     rsi, QWORD [ptrDestinationFile]
   913 000001C1 BF01000000                  mov     rdi, STDOUT
   914 000001C6 B801000000                  mov     rax, SYS_WRITE
   915 000001CB 0F05                        syscall
   916 000001CD EB35                        jmp     closesourcefile
   917                                      
   918                                  savefddestination:
   919 000001CF 48890425[18000000]          mov     [fddestination], rax
   920                                  ; FROM HERE WE CAN START ASSEMBLING
   921                                  
   922                                  
   923                                  
   924                                  ; END OF ASSEMBLING
   925                                  
   926                                  ; SAVE the binary file to destination file
   927 000001D7 48BE-                           mov     rsi, binary
   928 000001D9 [0000000000000000] 
   929 000001E1 BA10000000                      mov     rdx, 16
   930 000001E6 488B3C25[18000000]              mov     rdi, [fddestination]
   931 000001EE B801000000                      mov     rax, SYS_WRITE
   932 000001F3 0F05                            syscall
   933                                  closefiles:
   934                                          ; close destinationfile
   935 000001F5 488B3C25[18000000]              mov   rdi, QWORD[fddestination]
   936 000001FD B803000000                      mov   rax, SYS_CLOSE
   937 00000202 0F05                            syscall
   938                                          
   939                                          ; close sourcefile
   940                                  closesourcefile:
   941 00000204 488B3C25[10000000]              mov   rdi, QWORD[fdsource]
   942 0000020C B803000000                      mov   rax, SYS_CLOSE
   943 00000211 0F05                            syscall
   944 00000213 EB1B                            jmp   exit
   945                                      
   946                                  showUsage:
   947 00000215 48BE-                           mov   rsi, usageMessage
   948 00000217 [0000000000000000] 
   949 0000021F BA27000000                      mov   rdx, usageMessageL
   950 00000224 BF01000000                      mov   rdi, STDOUT
   951 00000229 B801000000                      mov   rax, SYS_WRITE
   952 0000022E 0F05                            syscall
   953                                  exit:        
   954 00000230 BF00000000                      mov     rdi, 0
   955 00000235 B83C000000                      mov     rax, SYS_EXIT
   956 0000023A 0F05                            syscall
   957                                  ;*********************************************
   958                                  ; END PROGRAM
   959                                  
   960                                  ReadTheFileSpec:
   961 0000023C 4889C7                        mov   rdi, rax
   962 0000023F 48BE-                         mov   rsi, stat
   963 00000241 [9200000000000000] 
   964 00000249 B805000000                    mov   rax, SYS_FSTAT
   965 0000024E 0F05                          syscall
   966                                        
   967 00000250 488B0C25[C2000000]            mov   rcx, QWORD [stat.st_size]   ; get the file size
   968 00000258 488B0425[9A000000]            mov   rax, QWORD [stat.st_ino]    ; file inode
   969                                        
   970 00000260 58                            pop   rax         ; restore fd
   971                                        
   972 00000261 50                            push  rax
   973                                  ReadFileContents:
   974 00000262 51                            push  rcx
   975 00000263 4889C7                        mov   rdi, rax        ; fd in RDI
   976 00000266 48BE-                         mov   rsi, charBuffer     ; place for one byte
   977 00000268 [8F00000000000000] 
   978 00000270 BA01000000                    mov   rdx, 1          ; read one char at the time
   979 00000275 50                            push  rax
   980 00000276 B800000000                    mov   rax, SYS_READ
   981 0000027B 0F05                          syscall
   982 0000027D E8B5000000                    call Print
   983 00000282 58                            pop   rax
   984 00000283 59                            pop   rcx
   985 00000284 48FFC9                        dec   rcx
   986 00000287 4883F900                      cmp   rcx, 0
   987 0000028B 75D5                          jne   ReadFileContents
   988                                  
   989 0000028D E8B8000000                    call  PrintCRLF
   990 00000292 90                            nop
   991 00000293 90                            nop
   992                                        
   993                                  CloseFile:
   994 00000294 58                            pop   rax
   995 00000295 4889C7                        mov   rdi, rax        ; file descriptor in RDI
   996 00000298 B803000000                    mov   rax, SYS_CLOSE      ; close the file
   997 0000029D 0F05                          syscall
   998 0000029F E9BB000000                    jmp   Exit
   999                                  
  1000 000002A4 E88E000000                    call  Print
  1001 000002A9 E89C000000                    call  PrintCRLF
  1002 000002AE E9AC000000                    jmp   Exit      
  1003                                        
  1004                                  Error:
  1005 000002B3 48BE-                         mov   rsi, errorMessage
  1006 000002B5 [2700000000000000] 
  1007 000002BD BA05000000                    mov   rdx, errorMessageL
  1008 000002C2 E870000000                    call  Print
  1009 000002C7 48F7D8                        neg   rax         ; get the error
  1010 000002CA 4831C9                        xor   rcx, rcx
  1011                                  getNextBits:
  1012 000002CD 48FFC1                        inc   rcx 
  1013 000002D0 4883F911                      cmp   rcx, 17         ; 16 bytes processed?
  1014 000002D4 745A                          je    ErrorEnd        ; Exit program
  1015 000002D6 4831D2                        xor   rdx, rdx
  1016 000002D9 48D1D0                        rcl   rax, 1          ; get 4 bits starting at MSBit
  1017 000002DC 48D1D2                        rcl   rdx, 1          ; store in rdx
  1018 000002DF 48D1D0                        rcl   rax, 1          ; get next bit starting at MSBit
  1019 000002E2 48D1D2                        rcl   rdx, 1          ; store in rdx
  1020 000002E5 48D1D0                        rcl   rax, 1          ; get next bit starting at MSBit
  1021 000002E8 48D1D2                        rcl   rdx, 1          ; store in rdx
  1022 000002EB 48D1D0                        rcl   rax, 1          ; get next bit starting at MSBit
  1023 000002EE 48D1D2                        rcl   rdx, 1          ; store in rdx
  1024 000002F1 803C25[91000000]01            cmp   BYTE[dataTrue], 1   ; are there already databits printed?
  1025 000002F9 740D                          je    skipZeroCheck
  1026 000002FB 80FA00                        cmp   dl, 0           ; data in it?
  1027 000002FE 74CD                          jz    getNextBits
  1028 00000300 C60425[91000000]01            mov   BYTE[dataTrue], 1   ; when dataTrue is True then print al following zeros
  1029                                  skipZeroCheck:      
  1030 00000308 80FA09                        cmp   dl,9
  1031 0000030B 7E03                          jle   toASCII
  1032 0000030D 80C207                        add   dl,7
  1033                                  toASCII:
  1034 00000310 80C230                        add   dl, "0"
  1035 00000313 881425[8F000000]              mov   BYTE[charBuffer], dl
  1036 0000031A 48BE-                         mov   rsi, charBuffer
  1037 0000031C [8F00000000000000] 
  1038 00000324 BA01000000                    mov   rdx, 1
  1039 00000329 E809000000                    call  Print           ; print the byte
  1040 0000032E EB9D                          jmp   getNextBits
  1041                                  ErrorEnd:
  1042 00000330 E815000000                    call  PrintCRLF
  1043 00000335 EB28                          jmp   Exit
  1044                                        
  1045                                  Print:
  1046 00000337 50                            push  rax
  1047 00000338 57                            push  rdi
  1048 00000339 51                            push  rcx
  1049 0000033A BF01000000                    mov   rdi, STDOUT
  1050 0000033F B801000000                    mov   rax, SYS_WRITE
  1051 00000344 0F05                          syscall
  1052 00000346 59                            pop   rcx
  1053 00000347 5F                            pop   rdi
  1054 00000348 58                            pop   rax
  1055 00000349 C3                            ret
  1056                                  
  1057                                  PrintCRLF:
  1058 0000034A 48BE-                         mov   rsi, crlf
  1059 0000034C [9000000000000000] 
  1060 00000354 BA02000000                    mov   rdx, 2
  1061 00000359 E8D9FFFFFF                    call  Print
  1062 0000035E C3                            ret
  1063                                        
  1064                                  Exit:      
  1065 0000035F 4831FF                        xor   rdi, rdi
  1066 00000362 6A3C                          push  SYS_EXIT
  1067 00000364 58                            pop   rax
  1068 00000365 0F05                          syscall
